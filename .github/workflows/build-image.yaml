on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true

name: Build Images

jobs:
  build-api-gateway:
    name: Build API Gateway Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build API Gateway Image
        id: build-api-gateway-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: api-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-api-gateway
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-workflow-runner:
    name: Build Workflow Runner Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Workflow Runner Image
        id: build-workflow-runner-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: background-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-workflow-runner
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-grpc-gateway:
    name: Build GRPC Gateway Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build GRPC Gateway Image
        id: build-grpc-gateway-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: grpc-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-grpc-gateway
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-provenance-indexer:
    name: Build Provenance Indexer Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Provenance Indexer Image
        id: build-provenance-indexer-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: provenance-indexer-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-provenance-indexer
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-image-indexer:
    name: Build Image Indexer Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Image Indexer Image
        id: build-image-indexer-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: image-indexer-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-image-indexer
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-event-processor:
    name: Build Event Processor Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Event Processor Image
        id: build-event-processor-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: event-processor-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-event-processor
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-ethereum-event-emitter:
    name: Build Ethereum Emitter Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Ethereum Event Emitter Image
        id: build-ethereum-event-emitter-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: ethereum-emitter-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-ethereum-event-emitter
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  build-tezos-event-emitter:
    name: Build Tezos Emitter Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Tezos Event Emitter Image
        id: build-tezos-event-emitter-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nft-indexer
          IMAGE_TAG: tezos-emitter-${{ github.event.inputs.version }}
          DOCKERFILE: Dockerfile-tezos-event-emitter
          GITHUB_USER: bitmark-bot
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed.
          # Build & push the docker image (check access policy: autonomy-ecr-pull-push-images)
          if ! aws ecr describe-images --repository-name="${ECR_REPOSITORY}" --image-ids="imageTag=${IMAGE_TAG}" > /dev/null 2>&1
          then
            docker build --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" --file="${DOCKERFILE}" "."
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          fi
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
