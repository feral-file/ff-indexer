// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: event-processor.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventProcessor_PushNftEvent_FullMethodName            = "/EventProcessor/PushNftEvent"
	EventProcessor_PushSeriesRegistryEvent_FullMethodName = "/EventProcessor/PushSeriesRegistryEvent"
)

// EventProcessorClient is the client API for EventProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProcessorClient interface {
	PushNftEvent(ctx context.Context, in *NftEventInput, opts ...grpc.CallOption) (*EventOutput, error)
	PushSeriesRegistryEvent(ctx context.Context, in *SeriesRegistryEventInput, opts ...grpc.CallOption) (*EventOutput, error)
}

type eventProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProcessorClient(cc grpc.ClientConnInterface) EventProcessorClient {
	return &eventProcessorClient{cc}
}

func (c *eventProcessorClient) PushNftEvent(ctx context.Context, in *NftEventInput, opts ...grpc.CallOption) (*EventOutput, error) {
	out := new(EventOutput)
	err := c.cc.Invoke(ctx, EventProcessor_PushNftEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorClient) PushSeriesRegistryEvent(ctx context.Context, in *SeriesRegistryEventInput, opts ...grpc.CallOption) (*EventOutput, error) {
	out := new(EventOutput)
	err := c.cc.Invoke(ctx, EventProcessor_PushSeriesRegistryEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventProcessorServer is the server API for EventProcessor service.
// All implementations must embed UnimplementedEventProcessorServer
// for forward compatibility
type EventProcessorServer interface {
	PushNftEvent(context.Context, *NftEventInput) (*EventOutput, error)
	PushSeriesRegistryEvent(context.Context, *SeriesRegistryEventInput) (*EventOutput, error)
	mustEmbedUnimplementedEventProcessorServer()
}

// UnimplementedEventProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedEventProcessorServer struct {
}

func (UnimplementedEventProcessorServer) PushNftEvent(context.Context, *NftEventInput) (*EventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNftEvent not implemented")
}
func (UnimplementedEventProcessorServer) PushSeriesRegistryEvent(context.Context, *SeriesRegistryEventInput) (*EventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSeriesRegistryEvent not implemented")
}
func (UnimplementedEventProcessorServer) mustEmbedUnimplementedEventProcessorServer() {}

// UnsafeEventProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProcessorServer will
// result in compilation errors.
type UnsafeEventProcessorServer interface {
	mustEmbedUnimplementedEventProcessorServer()
}

func RegisterEventProcessorServer(s grpc.ServiceRegistrar, srv EventProcessorServer) {
	s.RegisterService(&EventProcessor_ServiceDesc, srv)
}

func _EventProcessor_PushNftEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServer).PushNftEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventProcessor_PushNftEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServer).PushNftEvent(ctx, req.(*NftEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessor_PushSeriesRegistryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesRegistryEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServer).PushSeriesRegistryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventProcessor_PushSeriesRegistryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServer).PushSeriesRegistryEvent(ctx, req.(*SeriesRegistryEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EventProcessor_ServiceDesc is the grpc.ServiceDesc for EventProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EventProcessor",
	HandlerType: (*EventProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushNftEvent",
			Handler:    _EventProcessor_PushNftEvent_Handler,
		},
		{
			MethodName: "PushSeriesRegistryEvent",
			Handler:    _EventProcessor_PushSeriesRegistryEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event-processor.proto",
}
