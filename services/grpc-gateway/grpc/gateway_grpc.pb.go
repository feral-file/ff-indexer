// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: gateway.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Grpc_GetTokenByIndexID_FullMethodName              = "/grpc.Grpc/GetTokenByIndexID"
	Grpc_PushProvenance_FullMethodName                 = "/grpc.Grpc/PushProvenance"
	Grpc_UpdateOwner_FullMethodName                    = "/grpc.Grpc/UpdateOwner"
	Grpc_UpdateOwnerForFungibleToken_FullMethodName    = "/grpc.Grpc/UpdateOwnerForFungibleToken"
	Grpc_IndexAccountTokens_FullMethodName             = "/grpc.Grpc/IndexAccountTokens"
	Grpc_GetDetailedToken_FullMethodName               = "/grpc.Grpc/GetDetailedToken"
	Grpc_GetTotalBalanceOfOwnerAccounts_FullMethodName = "/grpc.Grpc/GetTotalBalanceOfOwnerAccounts"
	Grpc_GetOwnerAccountsByIndexIDs_FullMethodName     = "/grpc.Grpc/GetOwnerAccountsByIndexIDs"
	Grpc_CheckAddressOwnTokenByCriteria_FullMethodName = "/grpc.Grpc/CheckAddressOwnTokenByCriteria"
	Grpc_GetOwnersByBlockchainContracts_FullMethodName = "/grpc.Grpc/GetOwnersByBlockchainContracts"
	Grpc_GetETHBlockTime_FullMethodName                = "/grpc.Grpc/GetETHBlockTime"
	Grpc_GetIdentity_FullMethodName                    = "/grpc.Grpc/GetIdentity"
	Grpc_SendTimeSeriesData_FullMethodName             = "/grpc.Grpc/SendTimeSeriesData"
	Grpc_GetSaleTimeSeries_FullMethodName              = "/grpc.Grpc/GetSaleTimeSeries"
	Grpc_GetSaleRevenues_FullMethodName                = "/grpc.Grpc/GetSaleRevenues"
	Grpc_GetHistoricalExchangeRate_FullMethodName      = "/grpc.Grpc/GetHistoricalExchangeRate"
	Grpc_UpdateAssetsConfiguration_FullMethodName      = "/grpc.Grpc/UpdateAssetsConfiguration"
	Grpc_CheckAssetCreator_FullMethodName              = "/grpc.Grpc/CheckAssetCreator"
)

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcClient interface {
	GetTokenByIndexID(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*Token, error)
	PushProvenance(ctx context.Context, in *PushProvenanceRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	UpdateOwnerForFungibleToken(ctx context.Context, in *UpdateOwnerForFungibleTokenRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	IndexAccountTokens(ctx context.Context, in *IndexAccountTokensRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetDetailedToken(ctx context.Context, in *GetDetailedTokenRequest, opts ...grpc.CallOption) (*DetailedToken, error)
	GetTotalBalanceOfOwnerAccounts(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*TotalBalance, error)
	GetOwnerAccountsByIndexIDs(ctx context.Context, in *IndexIDs, opts ...grpc.CallOption) (*Addresses, error)
	CheckAddressOwnTokenByCriteria(ctx context.Context, in *CheckAddressOwnTokenByCriteriaRequest, opts ...grpc.CallOption) (*CheckAddressOwnTokenByCriteriaResponse, error)
	GetOwnersByBlockchainContracts(ctx context.Context, in *GetOwnersByBlockchainContractsRequest, opts ...grpc.CallOption) (*Addresses, error)
	GetETHBlockTime(ctx context.Context, in *GetETHBlockTimeRequest, opts ...grpc.CallOption) (*BlockTime, error)
	GetIdentity(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountIdentity, error)
	SendTimeSeriesData(ctx context.Context, in *SaleTimeSeriesRecords, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetSaleTimeSeries(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleTimeSeriesListResponse, error)
	GetSaleRevenues(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleRevenuesResponse, error)
	GetHistoricalExchangeRate(ctx context.Context, in *HistoricalExchangeRateFilter, opts ...grpc.CallOption) (*ExchangeRateResponse, error)
	UpdateAssetsConfiguration(ctx context.Context, in *UpdateAssetsConfigurationRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	CheckAssetCreator(ctx context.Context, in *CheckAssetCreatorRequest, opts ...grpc.CallOption) (*CheckAssetCreatorResponse, error)
}

type grpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcClient(cc grpc.ClientConnInterface) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) GetTokenByIndexID(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Grpc_GetTokenByIndexID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) PushProvenance(ctx context.Context, in *PushProvenanceRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Grpc_PushProvenance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Grpc_UpdateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) UpdateOwnerForFungibleToken(ctx context.Context, in *UpdateOwnerForFungibleTokenRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Grpc_UpdateOwnerForFungibleToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) IndexAccountTokens(ctx context.Context, in *IndexAccountTokensRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Grpc_IndexAccountTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetDetailedToken(ctx context.Context, in *GetDetailedTokenRequest, opts ...grpc.CallOption) (*DetailedToken, error) {
	out := new(DetailedToken)
	err := c.cc.Invoke(ctx, Grpc_GetDetailedToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetTotalBalanceOfOwnerAccounts(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*TotalBalance, error) {
	out := new(TotalBalance)
	err := c.cc.Invoke(ctx, Grpc_GetTotalBalanceOfOwnerAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetOwnerAccountsByIndexIDs(ctx context.Context, in *IndexIDs, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, Grpc_GetOwnerAccountsByIndexIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) CheckAddressOwnTokenByCriteria(ctx context.Context, in *CheckAddressOwnTokenByCriteriaRequest, opts ...grpc.CallOption) (*CheckAddressOwnTokenByCriteriaResponse, error) {
	out := new(CheckAddressOwnTokenByCriteriaResponse)
	err := c.cc.Invoke(ctx, Grpc_CheckAddressOwnTokenByCriteria_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetOwnersByBlockchainContracts(ctx context.Context, in *GetOwnersByBlockchainContractsRequest, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, Grpc_GetOwnersByBlockchainContracts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetETHBlockTime(ctx context.Context, in *GetETHBlockTimeRequest, opts ...grpc.CallOption) (*BlockTime, error) {
	out := new(BlockTime)
	err := c.cc.Invoke(ctx, Grpc_GetETHBlockTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetIdentity(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountIdentity, error) {
	out := new(AccountIdentity)
	err := c.cc.Invoke(ctx, Grpc_GetIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) SendTimeSeriesData(ctx context.Context, in *SaleTimeSeriesRecords, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Grpc_SendTimeSeriesData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetSaleTimeSeries(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleTimeSeriesListResponse, error) {
	out := new(SaleTimeSeriesListResponse)
	err := c.cc.Invoke(ctx, Grpc_GetSaleTimeSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetSaleRevenues(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleRevenuesResponse, error) {
	out := new(SaleRevenuesResponse)
	err := c.cc.Invoke(ctx, Grpc_GetSaleRevenues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetHistoricalExchangeRate(ctx context.Context, in *HistoricalExchangeRateFilter, opts ...grpc.CallOption) (*ExchangeRateResponse, error) {
	out := new(ExchangeRateResponse)
	err := c.cc.Invoke(ctx, Grpc_GetHistoricalExchangeRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) UpdateAssetsConfiguration(ctx context.Context, in *UpdateAssetsConfigurationRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Grpc_UpdateAssetsConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) CheckAssetCreator(ctx context.Context, in *CheckAssetCreatorRequest, opts ...grpc.CallOption) (*CheckAssetCreatorResponse, error) {
	out := new(CheckAssetCreatorResponse)
	err := c.cc.Invoke(ctx, Grpc_CheckAssetCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServer is the server API for Grpc service.
// All implementations must embed UnimplementedGrpcServer
// for forward compatibility
type GrpcServer interface {
	GetTokenByIndexID(context.Context, *IndexID) (*Token, error)
	PushProvenance(context.Context, *PushProvenanceRequest) (*EmptyMessage, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*EmptyMessage, error)
	UpdateOwnerForFungibleToken(context.Context, *UpdateOwnerForFungibleTokenRequest) (*EmptyMessage, error)
	IndexAccountTokens(context.Context, *IndexAccountTokensRequest) (*EmptyMessage, error)
	GetDetailedToken(context.Context, *GetDetailedTokenRequest) (*DetailedToken, error)
	GetTotalBalanceOfOwnerAccounts(context.Context, *Addresses) (*TotalBalance, error)
	GetOwnerAccountsByIndexIDs(context.Context, *IndexIDs) (*Addresses, error)
	CheckAddressOwnTokenByCriteria(context.Context, *CheckAddressOwnTokenByCriteriaRequest) (*CheckAddressOwnTokenByCriteriaResponse, error)
	GetOwnersByBlockchainContracts(context.Context, *GetOwnersByBlockchainContractsRequest) (*Addresses, error)
	GetETHBlockTime(context.Context, *GetETHBlockTimeRequest) (*BlockTime, error)
	GetIdentity(context.Context, *Address) (*AccountIdentity, error)
	SendTimeSeriesData(context.Context, *SaleTimeSeriesRecords) (*EmptyMessage, error)
	GetSaleTimeSeries(context.Context, *SaleTimeSeriesFilter) (*SaleTimeSeriesListResponse, error)
	GetSaleRevenues(context.Context, *SaleTimeSeriesFilter) (*SaleRevenuesResponse, error)
	GetHistoricalExchangeRate(context.Context, *HistoricalExchangeRateFilter) (*ExchangeRateResponse, error)
	UpdateAssetsConfiguration(context.Context, *UpdateAssetsConfigurationRequest) (*EmptyMessage, error)
	CheckAssetCreator(context.Context, *CheckAssetCreatorRequest) (*CheckAssetCreatorResponse, error)
	mustEmbedUnimplementedGrpcServer()
}

// UnimplementedGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServer struct {
}

func (UnimplementedGrpcServer) GetTokenByIndexID(context.Context, *IndexID) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenByIndexID not implemented")
}
func (UnimplementedGrpcServer) PushProvenance(context.Context, *PushProvenanceRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProvenance not implemented")
}
func (UnimplementedGrpcServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedGrpcServer) UpdateOwnerForFungibleToken(context.Context, *UpdateOwnerForFungibleTokenRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnerForFungibleToken not implemented")
}
func (UnimplementedGrpcServer) IndexAccountTokens(context.Context, *IndexAccountTokensRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexAccountTokens not implemented")
}
func (UnimplementedGrpcServer) GetDetailedToken(context.Context, *GetDetailedTokenRequest) (*DetailedToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedToken not implemented")
}
func (UnimplementedGrpcServer) GetTotalBalanceOfOwnerAccounts(context.Context, *Addresses) (*TotalBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalanceOfOwnerAccounts not implemented")
}
func (UnimplementedGrpcServer) GetOwnerAccountsByIndexIDs(context.Context, *IndexIDs) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerAccountsByIndexIDs not implemented")
}
func (UnimplementedGrpcServer) CheckAddressOwnTokenByCriteria(context.Context, *CheckAddressOwnTokenByCriteriaRequest) (*CheckAddressOwnTokenByCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddressOwnTokenByCriteria not implemented")
}
func (UnimplementedGrpcServer) GetOwnersByBlockchainContracts(context.Context, *GetOwnersByBlockchainContractsRequest) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnersByBlockchainContracts not implemented")
}
func (UnimplementedGrpcServer) GetETHBlockTime(context.Context, *GetETHBlockTimeRequest) (*BlockTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETHBlockTime not implemented")
}
func (UnimplementedGrpcServer) GetIdentity(context.Context, *Address) (*AccountIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedGrpcServer) SendTimeSeriesData(context.Context, *SaleTimeSeriesRecords) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTimeSeriesData not implemented")
}
func (UnimplementedGrpcServer) GetSaleTimeSeries(context.Context, *SaleTimeSeriesFilter) (*SaleTimeSeriesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleTimeSeries not implemented")
}
func (UnimplementedGrpcServer) GetSaleRevenues(context.Context, *SaleTimeSeriesFilter) (*SaleRevenuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleRevenues not implemented")
}
func (UnimplementedGrpcServer) GetHistoricalExchangeRate(context.Context, *HistoricalExchangeRateFilter) (*ExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalExchangeRate not implemented")
}
func (UnimplementedGrpcServer) UpdateAssetsConfiguration(context.Context, *UpdateAssetsConfigurationRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetsConfiguration not implemented")
}
func (UnimplementedGrpcServer) CheckAssetCreator(context.Context, *CheckAssetCreatorRequest) (*CheckAssetCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAssetCreator not implemented")
}
func (UnimplementedGrpcServer) mustEmbedUnimplementedGrpcServer() {}

// UnsafeGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServer will
// result in compilation errors.
type UnsafeGrpcServer interface {
	mustEmbedUnimplementedGrpcServer()
}

func RegisterGrpcServer(s grpc.ServiceRegistrar, srv GrpcServer) {
	s.RegisterService(&Grpc_ServiceDesc, srv)
}

func _Grpc_GetTokenByIndexID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetTokenByIndexID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetTokenByIndexID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetTokenByIndexID(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_PushProvenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProvenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).PushProvenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_PushProvenance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).PushProvenance(ctx, req.(*PushProvenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_UpdateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_UpdateOwnerForFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerForFungibleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).UpdateOwnerForFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_UpdateOwnerForFungibleToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).UpdateOwnerForFungibleToken(ctx, req.(*UpdateOwnerForFungibleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_IndexAccountTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexAccountTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).IndexAccountTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_IndexAccountTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).IndexAccountTokens(ctx, req.(*IndexAccountTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetDetailedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetDetailedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetDetailedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetDetailedToken(ctx, req.(*GetDetailedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetTotalBalanceOfOwnerAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetTotalBalanceOfOwnerAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetTotalBalanceOfOwnerAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetTotalBalanceOfOwnerAccounts(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetOwnerAccountsByIndexIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetOwnerAccountsByIndexIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetOwnerAccountsByIndexIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetOwnerAccountsByIndexIDs(ctx, req.(*IndexIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_CheckAddressOwnTokenByCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAddressOwnTokenByCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).CheckAddressOwnTokenByCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_CheckAddressOwnTokenByCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).CheckAddressOwnTokenByCriteria(ctx, req.(*CheckAddressOwnTokenByCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetOwnersByBlockchainContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnersByBlockchainContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetOwnersByBlockchainContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetOwnersByBlockchainContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetOwnersByBlockchainContracts(ctx, req.(*GetOwnersByBlockchainContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetETHBlockTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetETHBlockTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetETHBlockTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetETHBlockTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetETHBlockTime(ctx, req.(*GetETHBlockTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetIdentity(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_SendTimeSeriesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleTimeSeriesRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).SendTimeSeriesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_SendTimeSeriesData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).SendTimeSeriesData(ctx, req.(*SaleTimeSeriesRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetSaleTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleTimeSeriesFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetSaleTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetSaleTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetSaleTimeSeries(ctx, req.(*SaleTimeSeriesFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetSaleRevenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleTimeSeriesFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetSaleRevenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetSaleRevenues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetSaleRevenues(ctx, req.(*SaleTimeSeriesFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetHistoricalExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalExchangeRateFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetHistoricalExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetHistoricalExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetHistoricalExchangeRate(ctx, req.(*HistoricalExchangeRateFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_UpdateAssetsConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetsConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).UpdateAssetsConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_UpdateAssetsConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).UpdateAssetsConfiguration(ctx, req.(*UpdateAssetsConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_CheckAssetCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAssetCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).CheckAssetCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_CheckAssetCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).CheckAssetCreator(ctx, req.(*CheckAssetCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grpc_ServiceDesc is the grpc.ServiceDesc for Grpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenByIndexID",
			Handler:    _Grpc_GetTokenByIndexID_Handler,
		},
		{
			MethodName: "PushProvenance",
			Handler:    _Grpc_PushProvenance_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _Grpc_UpdateOwner_Handler,
		},
		{
			MethodName: "UpdateOwnerForFungibleToken",
			Handler:    _Grpc_UpdateOwnerForFungibleToken_Handler,
		},
		{
			MethodName: "IndexAccountTokens",
			Handler:    _Grpc_IndexAccountTokens_Handler,
		},
		{
			MethodName: "GetDetailedToken",
			Handler:    _Grpc_GetDetailedToken_Handler,
		},
		{
			MethodName: "GetTotalBalanceOfOwnerAccounts",
			Handler:    _Grpc_GetTotalBalanceOfOwnerAccounts_Handler,
		},
		{
			MethodName: "GetOwnerAccountsByIndexIDs",
			Handler:    _Grpc_GetOwnerAccountsByIndexIDs_Handler,
		},
		{
			MethodName: "CheckAddressOwnTokenByCriteria",
			Handler:    _Grpc_CheckAddressOwnTokenByCriteria_Handler,
		},
		{
			MethodName: "GetOwnersByBlockchainContracts",
			Handler:    _Grpc_GetOwnersByBlockchainContracts_Handler,
		},
		{
			MethodName: "GetETHBlockTime",
			Handler:    _Grpc_GetETHBlockTime_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Grpc_GetIdentity_Handler,
		},
		{
			MethodName: "SendTimeSeriesData",
			Handler:    _Grpc_SendTimeSeriesData_Handler,
		},
		{
			MethodName: "GetSaleTimeSeries",
			Handler:    _Grpc_GetSaleTimeSeries_Handler,
		},
		{
			MethodName: "GetSaleRevenues",
			Handler:    _Grpc_GetSaleRevenues_Handler,
		},
		{
			MethodName: "GetHistoricalExchangeRate",
			Handler:    _Grpc_GetHistoricalExchangeRate_Handler,
		},
		{
			MethodName: "UpdateAssetsConfiguration",
			Handler:    _Grpc_UpdateAssetsConfiguration_Handler,
		},
		{
			MethodName: "CheckAssetCreator",
			Handler:    _Grpc_CheckAssetCreator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
