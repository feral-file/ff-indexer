// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: indexer.proto

package indexer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerClient interface {
	GetTokenByIndexID(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*Token, error)
	PushProvenance(ctx context.Context, in *PushProvenanceRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateOwnerForFungibleToken(ctx context.Context, in *UpdateOwnerForFungibleTokenRequest, opts ...grpc.CallOption) (*Empty, error)
	IndexAccountTokens(ctx context.Context, in *IndexAccountTokensRequest, opts ...grpc.CallOption) (*Empty, error)
	GetDetailedToken(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*DetailedToken, error)
	GetTotalBalanceOfOwnerAccounts(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*TotalBalance, error)
	GetOwnerAccountsByIndexIDs(ctx context.Context, in *IndexIDs, opts ...grpc.CallOption) (*Addresses, error)
	GetRandomIndexIDByContract(ctx context.Context, in *Contract, opts ...grpc.CallOption) (*IndexID, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) GetTokenByIndexID(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/Indexer/GetTokenByIndexID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) PushProvenance(ctx context.Context, in *PushProvenanceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Indexer/PushProvenance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Indexer/UpdateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) UpdateOwnerForFungibleToken(ctx context.Context, in *UpdateOwnerForFungibleTokenRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Indexer/UpdateOwnerForFungibleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) IndexAccountTokens(ctx context.Context, in *IndexAccountTokensRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Indexer/IndexAccountTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetDetailedToken(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*DetailedToken, error) {
	out := new(DetailedToken)
	err := c.cc.Invoke(ctx, "/Indexer/GetDetailedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetTotalBalanceOfOwnerAccounts(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*TotalBalance, error) {
	out := new(TotalBalance)
	err := c.cc.Invoke(ctx, "/Indexer/GetTotalBalanceOfOwnerAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetOwnerAccountsByIndexIDs(ctx context.Context, in *IndexIDs, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/Indexer/GetOwnerAccountsByIndexIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetRandomIndexIDByContract(ctx context.Context, in *Contract, opts ...grpc.CallOption) (*IndexID, error) {
	out := new(IndexID)
	err := c.cc.Invoke(ctx, "/Indexer/GetRandomIndexIDByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
// All implementations must embed UnimplementedIndexerServer
// for forward compatibility
type IndexerServer interface {
	GetTokenByIndexID(context.Context, *IndexID) (*Token, error)
	PushProvenance(context.Context, *PushProvenanceRequest) (*Empty, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*Empty, error)
	UpdateOwnerForFungibleToken(context.Context, *UpdateOwnerForFungibleTokenRequest) (*Empty, error)
	IndexAccountTokens(context.Context, *IndexAccountTokensRequest) (*Empty, error)
	GetDetailedToken(context.Context, *IndexID) (*DetailedToken, error)
	GetTotalBalanceOfOwnerAccounts(context.Context, *Addresses) (*TotalBalance, error)
	GetOwnerAccountsByIndexIDs(context.Context, *IndexIDs) (*Addresses, error)
	GetRandomIndexIDByContract(context.Context, *Contract) (*IndexID, error)
	mustEmbedUnimplementedIndexerServer()
}

// UnimplementedIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (UnimplementedIndexerServer) GetTokenByIndexID(context.Context, *IndexID) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenByIndexID not implemented")
}
func (UnimplementedIndexerServer) PushProvenance(context.Context, *PushProvenanceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProvenance not implemented")
}
func (UnimplementedIndexerServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedIndexerServer) UpdateOwnerForFungibleToken(context.Context, *UpdateOwnerForFungibleTokenRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnerForFungibleToken not implemented")
}
func (UnimplementedIndexerServer) IndexAccountTokens(context.Context, *IndexAccountTokensRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexAccountTokens not implemented")
}
func (UnimplementedIndexerServer) GetDetailedToken(context.Context, *IndexID) (*DetailedToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedToken not implemented")
}
func (UnimplementedIndexerServer) GetTotalBalanceOfOwnerAccounts(context.Context, *Addresses) (*TotalBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalanceOfOwnerAccounts not implemented")
}
func (UnimplementedIndexerServer) GetOwnerAccountsByIndexIDs(context.Context, *IndexIDs) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerAccountsByIndexIDs not implemented")
}
func (UnimplementedIndexerServer) GetRandomIndexIDByContract(context.Context, *Contract) (*IndexID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomIndexIDByContract not implemented")
}
func (UnimplementedIndexerServer) mustEmbedUnimplementedIndexerServer() {}

// UnsafeIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServer will
// result in compilation errors.
type UnsafeIndexerServer interface {
	mustEmbedUnimplementedIndexerServer()
}

func RegisterIndexerServer(s grpc.ServiceRegistrar, srv IndexerServer) {
	s.RegisterService(&Indexer_ServiceDesc, srv)
}

func _Indexer_GetTokenByIndexID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetTokenByIndexID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetTokenByIndexID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetTokenByIndexID(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_PushProvenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProvenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).PushProvenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/PushProvenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).PushProvenance(ctx, req.(*PushProvenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/UpdateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_UpdateOwnerForFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerForFungibleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).UpdateOwnerForFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/UpdateOwnerForFungibleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).UpdateOwnerForFungibleToken(ctx, req.(*UpdateOwnerForFungibleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_IndexAccountTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexAccountTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).IndexAccountTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/IndexAccountTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).IndexAccountTokens(ctx, req.(*IndexAccountTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetDetailedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetDetailedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetDetailedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetDetailedToken(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetTotalBalanceOfOwnerAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetTotalBalanceOfOwnerAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetTotalBalanceOfOwnerAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetTotalBalanceOfOwnerAccounts(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetOwnerAccountsByIndexIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetOwnerAccountsByIndexIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetOwnerAccountsByIndexIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetOwnerAccountsByIndexIDs(ctx, req.(*IndexIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetRandomIndexIDByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetRandomIndexIDByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetRandomIndexIDByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetRandomIndexIDByContract(ctx, req.(*Contract))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexer_ServiceDesc is the grpc.ServiceDesc for Indexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenByIndexID",
			Handler:    _Indexer_GetTokenByIndexID_Handler,
		},
		{
			MethodName: "PushProvenance",
			Handler:    _Indexer_PushProvenance_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _Indexer_UpdateOwner_Handler,
		},
		{
			MethodName: "UpdateOwnerForFungibleToken",
			Handler:    _Indexer_UpdateOwnerForFungibleToken_Handler,
		},
		{
			MethodName: "IndexAccountTokens",
			Handler:    _Indexer_IndexAccountTokens_Handler,
		},
		{
			MethodName: "GetDetailedToken",
			Handler:    _Indexer_GetDetailedToken_Handler,
		},
		{
			MethodName: "GetTotalBalanceOfOwnerAccounts",
			Handler:    _Indexer_GetTotalBalanceOfOwnerAccounts_Handler,
		},
		{
			MethodName: "GetOwnerAccountsByIndexIDs",
			Handler:    _Indexer_GetOwnerAccountsByIndexIDs_Handler,
		},
		{
			MethodName: "GetRandomIndexIDByContract",
			Handler:    _Indexer_GetRandomIndexIDByContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer.proto",
}
