// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: indexer.proto

package indexer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Indexer_GetTokenByIndexID_FullMethodName              = "/Indexer/GetTokenByIndexID"
	Indexer_PushProvenance_FullMethodName                 = "/Indexer/PushProvenance"
	Indexer_UpdateOwner_FullMethodName                    = "/Indexer/UpdateOwner"
	Indexer_UpdateOwnerForFungibleToken_FullMethodName    = "/Indexer/UpdateOwnerForFungibleToken"
	Indexer_IndexAccountTokens_FullMethodName             = "/Indexer/IndexAccountTokens"
	Indexer_GetDetailedToken_FullMethodName               = "/Indexer/GetDetailedToken"
	Indexer_GetTotalBalanceOfOwnerAccounts_FullMethodName = "/Indexer/GetTotalBalanceOfOwnerAccounts"
	Indexer_GetOwnerAccountsByIndexIDs_FullMethodName     = "/Indexer/GetOwnerAccountsByIndexIDs"
	Indexer_CheckAddressOwnTokenByCriteria_FullMethodName = "/Indexer/CheckAddressOwnTokenByCriteria"
	Indexer_GetOwnersByBlockchainContracts_FullMethodName = "/Indexer/GetOwnersByBlockchainContracts"
	Indexer_GetETHBlockTime_FullMethodName                = "/Indexer/GetETHBlockTime"
	Indexer_GetIdentity_FullMethodName                    = "/Indexer/GetIdentity"
	Indexer_SendTimeSeriesData_FullMethodName             = "/Indexer/SendTimeSeriesData"
	Indexer_GetSaleTimeSeries_FullMethodName              = "/Indexer/GetSaleTimeSeries"
	Indexer_GetSaleRevenues_FullMethodName                = "/Indexer/GetSaleRevenues"
)

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerClient interface {
	GetTokenByIndexID(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*Token, error)
	PushProvenance(ctx context.Context, in *PushProvenanceRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateOwnerForFungibleToken(ctx context.Context, in *UpdateOwnerForFungibleTokenRequest, opts ...grpc.CallOption) (*Empty, error)
	IndexAccountTokens(ctx context.Context, in *IndexAccountTokensRequest, opts ...grpc.CallOption) (*Empty, error)
	GetDetailedToken(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*DetailedToken, error)
	GetTotalBalanceOfOwnerAccounts(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*TotalBalance, error)
	GetOwnerAccountsByIndexIDs(ctx context.Context, in *IndexIDs, opts ...grpc.CallOption) (*Addresses, error)
	CheckAddressOwnTokenByCriteria(ctx context.Context, in *CheckAddressOwnTokenByCriteriaRequest, opts ...grpc.CallOption) (*CheckAddressOwnTokenByCriteriaResponse, error)
	GetOwnersByBlockchainContracts(ctx context.Context, in *GetOwnersByBlockchainContractsRequest, opts ...grpc.CallOption) (*Addresses, error)
	GetETHBlockTime(ctx context.Context, in *GetETHBlockTimeRequest, opts ...grpc.CallOption) (*BlockTime, error)
	GetIdentity(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountIdentity, error)
	SendTimeSeriesData(ctx context.Context, in *SaleTimeSeriesRecords, opts ...grpc.CallOption) (*Empty, error)
	GetSaleTimeSeries(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleTimeSeriesListResponse, error)
	GetSaleRevenues(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleRevenuesResponse, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) GetTokenByIndexID(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Indexer_GetTokenByIndexID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) PushProvenance(ctx context.Context, in *PushProvenanceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Indexer_PushProvenance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Indexer_UpdateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) UpdateOwnerForFungibleToken(ctx context.Context, in *UpdateOwnerForFungibleTokenRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Indexer_UpdateOwnerForFungibleToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) IndexAccountTokens(ctx context.Context, in *IndexAccountTokensRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Indexer_IndexAccountTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetDetailedToken(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*DetailedToken, error) {
	out := new(DetailedToken)
	err := c.cc.Invoke(ctx, Indexer_GetDetailedToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetTotalBalanceOfOwnerAccounts(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*TotalBalance, error) {
	out := new(TotalBalance)
	err := c.cc.Invoke(ctx, Indexer_GetTotalBalanceOfOwnerAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetOwnerAccountsByIndexIDs(ctx context.Context, in *IndexIDs, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, Indexer_GetOwnerAccountsByIndexIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CheckAddressOwnTokenByCriteria(ctx context.Context, in *CheckAddressOwnTokenByCriteriaRequest, opts ...grpc.CallOption) (*CheckAddressOwnTokenByCriteriaResponse, error) {
	out := new(CheckAddressOwnTokenByCriteriaResponse)
	err := c.cc.Invoke(ctx, Indexer_CheckAddressOwnTokenByCriteria_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetOwnersByBlockchainContracts(ctx context.Context, in *GetOwnersByBlockchainContractsRequest, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, Indexer_GetOwnersByBlockchainContracts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetETHBlockTime(ctx context.Context, in *GetETHBlockTimeRequest, opts ...grpc.CallOption) (*BlockTime, error) {
	out := new(BlockTime)
	err := c.cc.Invoke(ctx, Indexer_GetETHBlockTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetIdentity(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountIdentity, error) {
	out := new(AccountIdentity)
	err := c.cc.Invoke(ctx, Indexer_GetIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) SendTimeSeriesData(ctx context.Context, in *SaleTimeSeriesRecords, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Indexer_SendTimeSeriesData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetSaleTimeSeries(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleTimeSeriesListResponse, error) {
	out := new(SaleTimeSeriesListResponse)
	err := c.cc.Invoke(ctx, Indexer_GetSaleTimeSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetSaleRevenues(ctx context.Context, in *SaleTimeSeriesFilter, opts ...grpc.CallOption) (*SaleRevenuesResponse, error) {
	out := new(SaleRevenuesResponse)
	err := c.cc.Invoke(ctx, Indexer_GetSaleRevenues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
// All implementations must embed UnimplementedIndexerServer
// for forward compatibility
type IndexerServer interface {
	GetTokenByIndexID(context.Context, *IndexID) (*Token, error)
	PushProvenance(context.Context, *PushProvenanceRequest) (*Empty, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*Empty, error)
	UpdateOwnerForFungibleToken(context.Context, *UpdateOwnerForFungibleTokenRequest) (*Empty, error)
	IndexAccountTokens(context.Context, *IndexAccountTokensRequest) (*Empty, error)
	GetDetailedToken(context.Context, *IndexID) (*DetailedToken, error)
	GetTotalBalanceOfOwnerAccounts(context.Context, *Addresses) (*TotalBalance, error)
	GetOwnerAccountsByIndexIDs(context.Context, *IndexIDs) (*Addresses, error)
	CheckAddressOwnTokenByCriteria(context.Context, *CheckAddressOwnTokenByCriteriaRequest) (*CheckAddressOwnTokenByCriteriaResponse, error)
	GetOwnersByBlockchainContracts(context.Context, *GetOwnersByBlockchainContractsRequest) (*Addresses, error)
	GetETHBlockTime(context.Context, *GetETHBlockTimeRequest) (*BlockTime, error)
	GetIdentity(context.Context, *Address) (*AccountIdentity, error)
	SendTimeSeriesData(context.Context, *SaleTimeSeriesRecords) (*Empty, error)
	GetSaleTimeSeries(context.Context, *SaleTimeSeriesFilter) (*SaleTimeSeriesListResponse, error)
	GetSaleRevenues(context.Context, *SaleTimeSeriesFilter) (*SaleRevenuesResponse, error)
	mustEmbedUnimplementedIndexerServer()
}

// UnimplementedIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (UnimplementedIndexerServer) GetTokenByIndexID(context.Context, *IndexID) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenByIndexID not implemented")
}
func (UnimplementedIndexerServer) PushProvenance(context.Context, *PushProvenanceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProvenance not implemented")
}
func (UnimplementedIndexerServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedIndexerServer) UpdateOwnerForFungibleToken(context.Context, *UpdateOwnerForFungibleTokenRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnerForFungibleToken not implemented")
}
func (UnimplementedIndexerServer) IndexAccountTokens(context.Context, *IndexAccountTokensRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexAccountTokens not implemented")
}
func (UnimplementedIndexerServer) GetDetailedToken(context.Context, *IndexID) (*DetailedToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedToken not implemented")
}
func (UnimplementedIndexerServer) GetTotalBalanceOfOwnerAccounts(context.Context, *Addresses) (*TotalBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalanceOfOwnerAccounts not implemented")
}
func (UnimplementedIndexerServer) GetOwnerAccountsByIndexIDs(context.Context, *IndexIDs) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerAccountsByIndexIDs not implemented")
}
func (UnimplementedIndexerServer) CheckAddressOwnTokenByCriteria(context.Context, *CheckAddressOwnTokenByCriteriaRequest) (*CheckAddressOwnTokenByCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddressOwnTokenByCriteria not implemented")
}
func (UnimplementedIndexerServer) GetOwnersByBlockchainContracts(context.Context, *GetOwnersByBlockchainContractsRequest) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnersByBlockchainContracts not implemented")
}
func (UnimplementedIndexerServer) GetETHBlockTime(context.Context, *GetETHBlockTimeRequest) (*BlockTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETHBlockTime not implemented")
}
func (UnimplementedIndexerServer) GetIdentity(context.Context, *Address) (*AccountIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedIndexerServer) SendTimeSeriesData(context.Context, *SaleTimeSeriesRecords) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTimeSeriesData not implemented")
}
func (UnimplementedIndexerServer) GetSaleTimeSeries(context.Context, *SaleTimeSeriesFilter) (*SaleTimeSeriesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleTimeSeries not implemented")
}
func (UnimplementedIndexerServer) GetSaleRevenues(context.Context, *SaleTimeSeriesFilter) (*SaleRevenuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleRevenues not implemented")
}
func (UnimplementedIndexerServer) mustEmbedUnimplementedIndexerServer() {}

// UnsafeIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServer will
// result in compilation errors.
type UnsafeIndexerServer interface {
	mustEmbedUnimplementedIndexerServer()
}

func RegisterIndexerServer(s grpc.ServiceRegistrar, srv IndexerServer) {
	s.RegisterService(&Indexer_ServiceDesc, srv)
}

func _Indexer_GetTokenByIndexID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetTokenByIndexID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetTokenByIndexID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetTokenByIndexID(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_PushProvenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProvenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).PushProvenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_PushProvenance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).PushProvenance(ctx, req.(*PushProvenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_UpdateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_UpdateOwnerForFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerForFungibleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).UpdateOwnerForFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_UpdateOwnerForFungibleToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).UpdateOwnerForFungibleToken(ctx, req.(*UpdateOwnerForFungibleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_IndexAccountTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexAccountTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).IndexAccountTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_IndexAccountTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).IndexAccountTokens(ctx, req.(*IndexAccountTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetDetailedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetDetailedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetDetailedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetDetailedToken(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetTotalBalanceOfOwnerAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetTotalBalanceOfOwnerAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetTotalBalanceOfOwnerAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetTotalBalanceOfOwnerAccounts(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetOwnerAccountsByIndexIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetOwnerAccountsByIndexIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetOwnerAccountsByIndexIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetOwnerAccountsByIndexIDs(ctx, req.(*IndexIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CheckAddressOwnTokenByCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAddressOwnTokenByCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CheckAddressOwnTokenByCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CheckAddressOwnTokenByCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CheckAddressOwnTokenByCriteria(ctx, req.(*CheckAddressOwnTokenByCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetOwnersByBlockchainContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnersByBlockchainContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetOwnersByBlockchainContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetOwnersByBlockchainContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetOwnersByBlockchainContracts(ctx, req.(*GetOwnersByBlockchainContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetETHBlockTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetETHBlockTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetETHBlockTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetETHBlockTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetETHBlockTime(ctx, req.(*GetETHBlockTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetIdentity(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_SendTimeSeriesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleTimeSeriesRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).SendTimeSeriesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_SendTimeSeriesData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).SendTimeSeriesData(ctx, req.(*SaleTimeSeriesRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetSaleTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleTimeSeriesFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetSaleTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetSaleTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetSaleTimeSeries(ctx, req.(*SaleTimeSeriesFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetSaleRevenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleTimeSeriesFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetSaleRevenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetSaleRevenues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetSaleRevenues(ctx, req.(*SaleTimeSeriesFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexer_ServiceDesc is the grpc.ServiceDesc for Indexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenByIndexID",
			Handler:    _Indexer_GetTokenByIndexID_Handler,
		},
		{
			MethodName: "PushProvenance",
			Handler:    _Indexer_PushProvenance_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _Indexer_UpdateOwner_Handler,
		},
		{
			MethodName: "UpdateOwnerForFungibleToken",
			Handler:    _Indexer_UpdateOwnerForFungibleToken_Handler,
		},
		{
			MethodName: "IndexAccountTokens",
			Handler:    _Indexer_IndexAccountTokens_Handler,
		},
		{
			MethodName: "GetDetailedToken",
			Handler:    _Indexer_GetDetailedToken_Handler,
		},
		{
			MethodName: "GetTotalBalanceOfOwnerAccounts",
			Handler:    _Indexer_GetTotalBalanceOfOwnerAccounts_Handler,
		},
		{
			MethodName: "GetOwnerAccountsByIndexIDs",
			Handler:    _Indexer_GetOwnerAccountsByIndexIDs_Handler,
		},
		{
			MethodName: "CheckAddressOwnTokenByCriteria",
			Handler:    _Indexer_CheckAddressOwnTokenByCriteria_Handler,
		},
		{
			MethodName: "GetOwnersByBlockchainContracts",
			Handler:    _Indexer_GetOwnersByBlockchainContracts_Handler,
		},
		{
			MethodName: "GetETHBlockTime",
			Handler:    _Indexer_GetETHBlockTime_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Indexer_GetIdentity_Handler,
		},
		{
			MethodName: "SendTimeSeriesData",
			Handler:    _Indexer_SendTimeSeriesData_Handler,
		},
		{
			MethodName: "GetSaleTimeSeries",
			Handler:    _Indexer_GetSaleTimeSeries_Handler,
		},
		{
			MethodName: "GetSaleRevenues",
			Handler:    _Indexer_GetSaleRevenues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer.proto",
}
