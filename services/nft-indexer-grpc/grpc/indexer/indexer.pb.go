// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: indexer.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckAddressOwnTokenByCriteriaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckAddressOwnTokenByCriteriaResponse) Reset() {
	*x = CheckAddressOwnTokenByCriteriaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAddressOwnTokenByCriteriaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAddressOwnTokenByCriteriaResponse) ProtoMessage() {}

func (x *CheckAddressOwnTokenByCriteriaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAddressOwnTokenByCriteriaResponse.ProtoReflect.Descriptor instead.
func (*CheckAddressOwnTokenByCriteriaResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *CheckAddressOwnTokenByCriteriaResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CheckAddressOwnTokenByCriteriaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string    `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Criteria *Criteria `protobuf:"bytes,2,opt,name=Criteria,proto3" json:"Criteria,omitempty"`
}

func (x *CheckAddressOwnTokenByCriteriaRequest) Reset() {
	*x = CheckAddressOwnTokenByCriteriaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAddressOwnTokenByCriteriaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAddressOwnTokenByCriteriaRequest) ProtoMessage() {}

func (x *CheckAddressOwnTokenByCriteriaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAddressOwnTokenByCriteriaRequest.ProtoReflect.Descriptor instead.
func (*CheckAddressOwnTokenByCriteriaRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *CheckAddressOwnTokenByCriteriaRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CheckAddressOwnTokenByCriteriaRequest) GetCriteria() *Criteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

type Criteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *Criteria) Reset() {
	*x = Criteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Criteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Criteria) ProtoMessage() {}

func (x *Criteria) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Criteria.ProtoReflect.Descriptor instead.
func (*Criteria) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *Criteria) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *Criteria) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type GetOwnersByBlockchainContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainContracts map[string]*Addresses `protobuf:"bytes,1,rep,name=BlockchainContracts,proto3" json:"BlockchainContracts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetOwnersByBlockchainContractsRequest) Reset() {
	*x = GetOwnersByBlockchainContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOwnersByBlockchainContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnersByBlockchainContractsRequest) ProtoMessage() {}

func (x *GetOwnersByBlockchainContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnersByBlockchainContractsRequest.ProtoReflect.Descriptor instead.
func (*GetOwnersByBlockchainContractsRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *GetOwnersByBlockchainContractsRequest) GetBlockchainContracts() map[string]*Addresses {
	if x != nil {
		return x.BlockchainContracts
	}
	return nil
}

type Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=Addresses,proto3" json:"Addresses,omitempty"`
}

func (x *Addresses) Reset() {
	*x = Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addresses) ProtoMessage() {}

func (x *Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addresses.ProtoReflect.Descriptor instead.
func (*Addresses) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *Addresses) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type IndexIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexIDs []string `protobuf:"bytes,1,rep,name=IndexIDs,proto3" json:"IndexIDs,omitempty"`
}

func (x *IndexIDs) Reset() {
	*x = IndexIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexIDs) ProtoMessage() {}

func (x *IndexIDs) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexIDs.ProtoReflect.Descriptor instead.
func (*IndexIDs) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *IndexIDs) GetIndexIDs() []string {
	if x != nil {
		return x.IndexIDs
	}
	return nil
}

type IndexID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
}

func (x *IndexID) Reset() {
	*x = IndexID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexID) ProtoMessage() {}

func (x *IndexID) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexID.ProtoReflect.Descriptor instead.
func (*IndexID) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *IndexID) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

type TotalBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TotalBalance) Reset() {
	*x = TotalBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalBalance) ProtoMessage() {}

func (x *TotalBalance) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalBalance.ProtoReflect.Descriptor instead.
func (*TotalBalance) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *TotalBalance) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DetailedToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           *Token                    `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ThumbnailID     string                    `protobuf:"bytes,2,opt,name=ThumbnailID,proto3" json:"ThumbnailID,omitempty"`
	IPFSPinned      bool                      `protobuf:"varint,3,opt,name=IPFSPinned,proto3" json:"IPFSPinned,omitempty"`
	Attributes      *AssetAttributes          `protobuf:"bytes,4,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	ProjectMetadata *VersionedProjectMetadata `protobuf:"bytes,5,opt,name=ProjectMetadata,proto3" json:"ProjectMetadata,omitempty"`
}

func (x *DetailedToken) Reset() {
	*x = DetailedToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedToken) ProtoMessage() {}

func (x *DetailedToken) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedToken.ProtoReflect.Descriptor instead.
func (*DetailedToken) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{8}
}

func (x *DetailedToken) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DetailedToken) GetThumbnailID() string {
	if x != nil {
		return x.ThumbnailID
	}
	return ""
}

func (x *DetailedToken) GetIPFSPinned() bool {
	if x != nil {
		return x.IPFSPinned
	}
	return false
}

func (x *DetailedToken) GetAttributes() *AssetAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DetailedToken) GetProjectMetadata() *VersionedProjectMetadata {
	if x != nil {
		return x.ProjectMetadata
	}
	return nil
}

type DisplayConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scaling         string `protobuf:"bytes,1,opt,name=Scaling,proto3" json:"Scaling,omitempty"`
	BackgroundColor string `protobuf:"bytes,2,opt,name=BackgroundColor,proto3" json:"BackgroundColor,omitempty"`
	Margin          int64  `protobuf:"varint,3,opt,name=Margin,proto3" json:"Margin,omitempty"`
	AutoPlay        bool   `protobuf:"varint,4,opt,name=AutoPlay,proto3" json:"AutoPlay,omitempty"`
	Looping         bool   `protobuf:"varint,5,opt,name=Looping,proto3" json:"Looping,omitempty"`
	DisableOverride bool   `protobuf:"varint,6,opt,name=DisableOverride,proto3" json:"DisableOverride,omitempty"`
}

func (x *DisplayConfiguration) Reset() {
	*x = DisplayConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayConfiguration) ProtoMessage() {}

func (x *DisplayConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayConfiguration.ProtoReflect.Descriptor instead.
func (*DisplayConfiguration) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{9}
}

func (x *DisplayConfiguration) GetScaling() string {
	if x != nil {
		return x.Scaling
	}
	return ""
}

func (x *DisplayConfiguration) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *DisplayConfiguration) GetMargin() int64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *DisplayConfiguration) GetAutoPlay() bool {
	if x != nil {
		return x.AutoPlay
	}
	return false
}

func (x *DisplayConfiguration) GetLooping() bool {
	if x != nil {
		return x.Looping
	}
	return false
}

func (x *DisplayConfiguration) GetDisableOverride() bool {
	if x != nil {
		return x.DisableOverride
	}
	return false
}

type MouseConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clickable  bool `protobuf:"varint,1,opt,name=Clickable,proto3" json:"Clickable,omitempty"`
	Scrollable bool `protobuf:"varint,2,opt,name=Scrollable,proto3" json:"Scrollable,omitempty"`
	Draggable  bool `protobuf:"varint,3,opt,name=Draggable,proto3" json:"Draggable,omitempty"`
	Hoverable  bool `protobuf:"varint,4,opt,name=Hoverable,proto3" json:"Hoverable,omitempty"`
}

func (x *MouseConfiguration) Reset() {
	*x = MouseConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseConfiguration) ProtoMessage() {}

func (x *MouseConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseConfiguration.ProtoReflect.Descriptor instead.
func (*MouseConfiguration) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{10}
}

func (x *MouseConfiguration) GetClickable() bool {
	if x != nil {
		return x.Clickable
	}
	return false
}

func (x *MouseConfiguration) GetScrollable() bool {
	if x != nil {
		return x.Scrollable
	}
	return false
}

func (x *MouseConfiguration) GetDraggable() bool {
	if x != nil {
		return x.Draggable
	}
	return false
}

func (x *MouseConfiguration) GetHoverable() bool {
	if x != nil {
		return x.Hoverable
	}
	return false
}

type KeyboardConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
}

func (x *KeyboardConfiguration) Reset() {
	*x = KeyboardConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyboardConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardConfiguration) ProtoMessage() {}

func (x *KeyboardConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardConfiguration.ProtoReflect.Descriptor instead.
func (*KeyboardConfiguration) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{11}
}

func (x *KeyboardConfiguration) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type InteractionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mouse    *MouseConfiguration    `protobuf:"bytes,1,opt,name=Mouse,proto3" json:"Mouse,omitempty"`
	Keyboard *KeyboardConfiguration `protobuf:"bytes,2,opt,name=Keyboard,proto3" json:"Keyboard,omitempty"`
}

func (x *InteractionConfiguration) Reset() {
	*x = InteractionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionConfiguration) ProtoMessage() {}

func (x *InteractionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionConfiguration.ProtoReflect.Descriptor instead.
func (*InteractionConfiguration) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{12}
}

func (x *InteractionConfiguration) GetMouse() *MouseConfiguration {
	if x != nil {
		return x.Mouse
	}
	return nil
}

func (x *InteractionConfiguration) GetKeyboard() *KeyboardConfiguration {
	if x != nil {
		return x.Keyboard
	}
	return nil
}

type AssetConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Display     *DisplayConfiguration     `protobuf:"bytes,1,opt,name=Display,proto3" json:"Display,omitempty"`
	Interaction *InteractionConfiguration `protobuf:"bytes,2,opt,name=Interaction,proto3" json:"Interaction,omitempty"`
}

func (x *AssetConfiguration) Reset() {
	*x = AssetConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetConfiguration) ProtoMessage() {}

func (x *AssetConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetConfiguration.ProtoReflect.Descriptor instead.
func (*AssetConfiguration) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{13}
}

func (x *AssetConfiguration) GetDisplay() *DisplayConfiguration {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *AssetConfiguration) GetInteraction() *InteractionConfiguration {
	if x != nil {
		return x.Interaction
	}
	return nil
}

type AssetAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *AssetConfiguration `protobuf:"bytes,1,opt,name=Configuration,proto3" json:"Configuration,omitempty"`
}

func (x *AssetAttributes) Reset() {
	*x = AssetAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAttributes) ProtoMessage() {}

func (x *AssetAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAttributes.ProtoReflect.Descriptor instead.
func (*AssetAttributes) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{14}
}

func (x *AssetAttributes) GetConfiguration() *AssetConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type VersionedProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *ProjectMetadata `protobuf:"bytes,1,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Latest *ProjectMetadata `protobuf:"bytes,2,opt,name=Latest,proto3" json:"Latest,omitempty"`
}

func (x *VersionedProjectMetadata) Reset() {
	*x = VersionedProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedProjectMetadata) ProtoMessage() {}

func (x *VersionedProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedProjectMetadata.ProtoReflect.Descriptor instead.
func (*VersionedProjectMetadata) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{15}
}

func (x *VersionedProjectMetadata) GetOrigin() *ProjectMetadata {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *VersionedProjectMetadata) GetLatest() *ProjectMetadata {
	if x != nil {
		return x.Latest
	}
	return nil
}

type ProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistID            string           `protobuf:"bytes,1,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	ArtistName          string           `protobuf:"bytes,2,opt,name=ArtistName,proto3" json:"ArtistName,omitempty"`
	ArtistURL           string           `protobuf:"bytes,3,opt,name=ArtistURL,proto3" json:"ArtistURL,omitempty"`
	AssetID             string           `protobuf:"bytes,4,opt,name=AssetID,proto3" json:"AssetID,omitempty"`
	Title               string           `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
	Description         string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	MIMEType            string           `protobuf:"bytes,7,opt,name=MIMEType,proto3" json:"MIMEType,omitempty"`
	Medium              string           `protobuf:"bytes,8,opt,name=Medium,proto3" json:"Medium,omitempty"`
	MaxEdition          int64            `protobuf:"varint,9,opt,name=MaxEdition,proto3" json:"MaxEdition,omitempty"`
	BaseCurrency        string           `protobuf:"bytes,10,opt,name=BaseCurrency,proto3" json:"BaseCurrency,omitempty"`
	BasePrice           float64          `protobuf:"fixed64,11,opt,name=BasePrice,proto3" json:"BasePrice,omitempty"`
	Source              string           `protobuf:"bytes,12,opt,name=Source,proto3" json:"Source,omitempty"`
	SourceURL           string           `protobuf:"bytes,13,opt,name=SourceURL,proto3" json:"SourceURL,omitempty"`
	PreviewURL          string           `protobuf:"bytes,14,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`
	ThumbnailURL        string           `protobuf:"bytes,15,opt,name=ThumbnailURL,proto3" json:"ThumbnailURL,omitempty"`
	GalleryThumbnailURL string           `protobuf:"bytes,16,opt,name=GalleryThumbnailURL,proto3" json:"GalleryThumbnailURL,omitempty"`
	AssetData           string           `protobuf:"bytes,17,opt,name=AssetData,proto3" json:"AssetData,omitempty"`
	AssetURL            string           `protobuf:"bytes,18,opt,name=AssetURL,proto3" json:"AssetURL,omitempty"`
	Attributes          *AssetAttributes `protobuf:"bytes,19,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	ArtworkMetadata     string           `protobuf:"bytes,20,opt,name=ArtworkMetadata,proto3" json:"ArtworkMetadata,omitempty"`
	LastUpdatedAt       string           `protobuf:"bytes,21,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	InitialSaleModel    string           `protobuf:"bytes,22,opt,name=InitialSaleModel,proto3" json:"InitialSaleModel,omitempty"`
	OriginalFileURL     string           `protobuf:"bytes,23,opt,name=OriginalFileURL,proto3" json:"OriginalFileURL,omitempty"`
	Artists             []*Artist        `protobuf:"bytes,24,rep,name=Artists,proto3" json:"Artists,omitempty"`
}

func (x *ProjectMetadata) Reset() {
	*x = ProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMetadata) ProtoMessage() {}

func (x *ProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMetadata.ProtoReflect.Descriptor instead.
func (*ProjectMetadata) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{16}
}

func (x *ProjectMetadata) GetArtistID() string {
	if x != nil {
		return x.ArtistID
	}
	return ""
}

func (x *ProjectMetadata) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *ProjectMetadata) GetArtistURL() string {
	if x != nil {
		return x.ArtistURL
	}
	return ""
}

func (x *ProjectMetadata) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *ProjectMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProjectMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProjectMetadata) GetMIMEType() string {
	if x != nil {
		return x.MIMEType
	}
	return ""
}

func (x *ProjectMetadata) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *ProjectMetadata) GetMaxEdition() int64 {
	if x != nil {
		return x.MaxEdition
	}
	return 0
}

func (x *ProjectMetadata) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *ProjectMetadata) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *ProjectMetadata) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProjectMetadata) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *ProjectMetadata) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

func (x *ProjectMetadata) GetThumbnailURL() string {
	if x != nil {
		return x.ThumbnailURL
	}
	return ""
}

func (x *ProjectMetadata) GetGalleryThumbnailURL() string {
	if x != nil {
		return x.GalleryThumbnailURL
	}
	return ""
}

func (x *ProjectMetadata) GetAssetData() string {
	if x != nil {
		return x.AssetData
	}
	return ""
}

func (x *ProjectMetadata) GetAssetURL() string {
	if x != nil {
		return x.AssetURL
	}
	return ""
}

func (x *ProjectMetadata) GetAttributes() *AssetAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProjectMetadata) GetArtworkMetadata() string {
	if x != nil {
		return x.ArtworkMetadata
	}
	return ""
}

func (x *ProjectMetadata) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *ProjectMetadata) GetInitialSaleModel() string {
	if x != nil {
		return x.InitialSaleModel
	}
	return ""
}

func (x *ProjectMetadata) GetOriginalFileURL() string {
	if x != nil {
		return x.OriginalFileURL
	}
	return ""
}

func (x *ProjectMetadata) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistID   string `protobuf:"bytes,1,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	ArtistName string `protobuf:"bytes,2,opt,name=ArtistName,proto3" json:"ArtistName,omitempty"`
	ArtistURL  string `protobuf:"bytes,3,opt,name=ArtistURL,proto3" json:"ArtistURL,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{17}
}

func (x *Artist) GetArtistID() string {
	if x != nil {
		return x.ArtistID
	}
	return ""
}

func (x *Artist) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *Artist) GetArtistURL() string {
	if x != nil {
		return x.ArtistURL
	}
	return ""
}

type IndexAccountTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner         string          `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	AccountTokens []*AccountToken `protobuf:"bytes,2,rep,name=AccountTokens,proto3" json:"AccountTokens,omitempty"`
}

func (x *IndexAccountTokensRequest) Reset() {
	*x = IndexAccountTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexAccountTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexAccountTokensRequest) ProtoMessage() {}

func (x *IndexAccountTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexAccountTokensRequest.ProtoReflect.Descriptor instead.
func (*IndexAccountTokensRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{18}
}

func (x *IndexAccountTokensRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IndexAccountTokensRequest) GetAccountTokens() []*AccountToken {
	if x != nil {
		return x.AccountTokens
	}
	return nil
}

type AccountToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // FIXME: need implement BaseTokenInfo
	Blockchain        string   `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible          bool     `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType      string   `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress   string   `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	IndexID           string   `protobuf:"bytes,6,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	OwnerAccount      string   `protobuf:"bytes,7,opt,name=OwnerAccount,proto3" json:"OwnerAccount,omitempty"`
	Balance           int64    `protobuf:"varint,8,opt,name=Balance,proto3" json:"Balance,omitempty"`
	LastActivityTime  string   `protobuf:"bytes,9,opt,name=LastActivityTime,proto3" json:"LastActivityTime,omitempty"`
	LastRefreshedTime string   `protobuf:"bytes,10,opt,name=LastRefreshedTime,proto3" json:"LastRefreshedTime,omitempty"`
	LastPendingTime   []string `protobuf:"bytes,11,rep,name=LastPendingTime,proto3" json:"LastPendingTime,omitempty"`
	LastUpdatedAt     string   `protobuf:"bytes,12,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	PendingTxs        []string `protobuf:"bytes,13,rep,name=PendingTxs,proto3" json:"PendingTxs,omitempty"`
}

func (x *AccountToken) Reset() {
	*x = AccountToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountToken) ProtoMessage() {}

func (x *AccountToken) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountToken.ProtoReflect.Descriptor instead.
func (*AccountToken) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{19}
}

func (x *AccountToken) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AccountToken) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *AccountToken) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *AccountToken) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *AccountToken) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *AccountToken) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *AccountToken) GetOwnerAccount() string {
	if x != nil {
		return x.OwnerAccount
	}
	return ""
}

func (x *AccountToken) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountToken) GetLastActivityTime() string {
	if x != nil {
		return x.LastActivityTime
	}
	return ""
}

func (x *AccountToken) GetLastRefreshedTime() string {
	if x != nil {
		return x.LastRefreshedTime
	}
	return ""
}

func (x *AccountToken) GetLastPendingTime() []string {
	if x != nil {
		return x.LastPendingTime
	}
	return nil
}

func (x *AccountToken) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *AccountToken) GetPendingTxs() []string {
	if x != nil {
		return x.PendingTxs
	}
	return nil
}

type UpdateOwnerForFungibleTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID    string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	LockedTime string `protobuf:"bytes,2,opt,name=LockedTime,proto3" json:"LockedTime,omitempty"`
	To         string `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Total      int64  `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *UpdateOwnerForFungibleTokenRequest) Reset() {
	*x = UpdateOwnerForFungibleTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOwnerForFungibleTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnerForFungibleTokenRequest) ProtoMessage() {}

func (x *UpdateOwnerForFungibleTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnerForFungibleTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnerForFungibleTokenRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOwnerForFungibleTokenRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *UpdateOwnerForFungibleTokenRequest) GetLockedTime() string {
	if x != nil {
		return x.LockedTime
	}
	return ""
}

func (x *UpdateOwnerForFungibleTokenRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *UpdateOwnerForFungibleTokenRequest) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID   string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Owner     string `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	UpdatedAt string `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *UpdateOwnerRequest) Reset() {
	*x = UpdateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnerRequest) ProtoMessage() {}

func (x *UpdateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnerRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateOwnerRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *UpdateOwnerRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *UpdateOwnerRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{22}
}

type PushProvenanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID    string      `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	LockedTime string      `protobuf:"bytes,2,opt,name=LockedTime,proto3" json:"LockedTime,omitempty"`
	Provenance *Provenance `protobuf:"bytes,3,opt,name=Provenance,proto3" json:"Provenance,omitempty"`
}

func (x *PushProvenanceRequest) Reset() {
	*x = PushProvenanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushProvenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushProvenanceRequest) ProtoMessage() {}

func (x *PushProvenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushProvenanceRequest.ProtoReflect.Descriptor instead.
func (*PushProvenanceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{23}
}

func (x *PushProvenanceRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *PushProvenanceRequest) GetLockedTime() string {
	if x != nil {
		return x.LockedTime
	}
	return ""
}

func (x *PushProvenanceRequest) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Blockchain        string           `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible          bool             `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType      string           `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress   string           `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	Edition           int64            `protobuf:"varint,6,opt,name=Edition,proto3" json:"Edition,omitempty"`
	EditionName       string           `protobuf:"bytes,7,opt,name=EditionName,proto3" json:"EditionName,omitempty"`
	MintedAt          string           `protobuf:"bytes,8,opt,name=MintedAt,proto3" json:"MintedAt,omitempty"` // time type is mapped by string
	Balance           int64            `protobuf:"varint,9,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Owner             string           `protobuf:"bytes,10,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Owners            map[string]int64 `protobuf:"bytes,11,rep,name=Owners,proto3" json:"Owners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OwnersArray       []string         `protobuf:"bytes,12,rep,name=OwnersArray,proto3" json:"OwnersArray,omitempty"`
	AssetID           string           `protobuf:"bytes,13,opt,name=AssetID,proto3" json:"AssetID,omitempty"`
	OriginTokenInfo   []*BaseTokenInfo `protobuf:"bytes,14,rep,name=OriginTokenInfo,proto3" json:"OriginTokenInfo,omitempty"`
	IsDemo            bool             `protobuf:"varint,15,opt,name=IsDemo,proto3" json:"IsDemo,omitempty"`
	IndexID           string           `protobuf:"bytes,16,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Source            string           `protobuf:"bytes,17,opt,name=Source,proto3" json:"Source,omitempty"`
	Swapped           bool             `protobuf:"varint,18,opt,name=Swapped,proto3" json:"Swapped,omitempty"`
	SwappedFrom       string           `protobuf:"bytes,19,opt,name=SwappedFrom,proto3" json:"SwappedFrom,omitempty"`
	SwappedTo         string           `protobuf:"bytes,20,opt,name=SwappedTo,proto3" json:"SwappedTo,omitempty"`
	Burned            bool             `protobuf:"varint,21,opt,name=Burned,proto3" json:"Burned,omitempty"`
	Provenances       []*Provenance    `protobuf:"bytes,22,rep,name=Provenances,proto3" json:"Provenances,omitempty"`
	LastActivityTime  string           `protobuf:"bytes,23,opt,name=LastActivityTime,proto3" json:"LastActivityTime,omitempty"`
	LastRefreshedTime string           `protobuf:"bytes,24,opt,name=LastRefreshedTime,proto3" json:"LastRefreshedTime,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{24}
}

func (x *Token) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Token) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Token) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *Token) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *Token) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Token) GetEdition() int64 {
	if x != nil {
		return x.Edition
	}
	return 0
}

func (x *Token) GetEditionName() string {
	if x != nil {
		return x.EditionName
	}
	return ""
}

func (x *Token) GetMintedAt() string {
	if x != nil {
		return x.MintedAt
	}
	return ""
}

func (x *Token) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Token) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Token) GetOwners() map[string]int64 {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Token) GetOwnersArray() []string {
	if x != nil {
		return x.OwnersArray
	}
	return nil
}

func (x *Token) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *Token) GetOriginTokenInfo() []*BaseTokenInfo {
	if x != nil {
		return x.OriginTokenInfo
	}
	return nil
}

func (x *Token) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *Token) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *Token) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Token) GetSwapped() bool {
	if x != nil {
		return x.Swapped
	}
	return false
}

func (x *Token) GetSwappedFrom() string {
	if x != nil {
		return x.SwappedFrom
	}
	return ""
}

func (x *Token) GetSwappedTo() string {
	if x != nil {
		return x.SwappedTo
	}
	return ""
}

func (x *Token) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Token) GetProvenances() []*Provenance {
	if x != nil {
		return x.Provenances
	}
	return nil
}

func (x *Token) GetLastActivityTime() string {
	if x != nil {
		return x.LastActivityTime
	}
	return ""
}

func (x *Token) GetLastRefreshedTime() string {
	if x != nil {
		return x.LastRefreshedTime
	}
	return ""
}

type Provenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormerOwner string  `protobuf:"bytes,1,opt,name=FormerOwner,proto3" json:"FormerOwner,omitempty"`
	Type        string  `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Owner       string  `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Blockchain  string  `protobuf:"bytes,4,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	BlockNumber *uint64 `protobuf:"varint,5,opt,name=BlockNumber,proto3,oneof" json:"BlockNumber,omitempty"`
	Timestamp   string  `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TxID        string  `protobuf:"bytes,7,opt,name=TxID,proto3" json:"TxID,omitempty"`
	TxURL       string  `protobuf:"bytes,8,opt,name=TxURL,proto3" json:"TxURL,omitempty"`
}

func (x *Provenance) Reset() {
	*x = Provenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance) ProtoMessage() {}

func (x *Provenance) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance.ProtoReflect.Descriptor instead.
func (*Provenance) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{25}
}

func (x *Provenance) GetFormerOwner() string {
	if x != nil {
		return x.FormerOwner
	}
	return ""
}

func (x *Provenance) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Provenance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Provenance) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Provenance) GetBlockNumber() uint64 {
	if x != nil && x.BlockNumber != nil {
		return *x.BlockNumber
	}
	return 0
}

func (x *Provenance) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Provenance) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *Provenance) GetTxURL() string {
	if x != nil {
		return x.TxURL
	}
	return ""
}

type BaseTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Blockchain      string `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible        bool   `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType    string `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress string `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
}

func (x *BaseTokenInfo) Reset() {
	*x = BaseTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTokenInfo) ProtoMessage() {}

func (x *BaseTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTokenInfo.ProtoReflect.Descriptor instead.
func (*BaseTokenInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{26}
}

func (x *BaseTokenInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BaseTokenInfo) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *BaseTokenInfo) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *BaseTokenInfo) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *BaseTokenInfo) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type GetETHBlockTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *GetETHBlockTimeRequest) Reset() {
	*x = GetETHBlockTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetETHBlockTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetETHBlockTimeRequest) ProtoMessage() {}

func (x *GetETHBlockTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetETHBlockTimeRequest.ProtoReflect.Descriptor instead.
func (*GetETHBlockTimeRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{27}
}

func (x *GetETHBlockTimeRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type BlockTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockTime string `protobuf:"bytes,1,opt,name=BlockTime,proto3" json:"BlockTime,omitempty"`
}

func (x *BlockTime) Reset() {
	*x = BlockTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTime) ProtoMessage() {}

func (x *BlockTime) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTime.ProtoReflect.Descriptor instead.
func (*BlockTime) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{28}
}

func (x *BlockTime) GetBlockTime() string {
	if x != nil {
		return x.BlockTime
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{29}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AccountIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNumber   string `protobuf:"bytes,1,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	Blockchain      string `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	LastUpdatedTime string `protobuf:"bytes,4,opt,name=LastUpdatedTime,proto3" json:"LastUpdatedTime,omitempty"`
}

func (x *AccountIdentity) Reset() {
	*x = AccountIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountIdentity) ProtoMessage() {}

func (x *AccountIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountIdentity.ProtoReflect.Descriptor instead.
func (*AccountIdentity) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{30}
}

func (x *AccountIdentity) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *AccountIdentity) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *AccountIdentity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountIdentity) GetLastUpdatedTime() string {
	if x != nil {
		return x.LastUpdatedTime
	}
	return ""
}

// generic record to support any kind of time series data
type SaleTimeSeriesRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string            `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                   // ts.UTC().Format(time.RFC3339Nano) for BSON.ISODate()
	Metadata  *structpb.Struct  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                     // just metata data for grouping/sorting
	Values    map[string]string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // top-level values for BSON.Decimal128()
	Shares    map[string]string `protobuf:"bytes,4,rep,name=shares,proto3" json:"shares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // sub-level values for BSON.Decimal128()
}

func (x *SaleTimeSeriesRecord) Reset() {
	*x = SaleTimeSeriesRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleTimeSeriesRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleTimeSeriesRecord) ProtoMessage() {}

func (x *SaleTimeSeriesRecord) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleTimeSeriesRecord.ProtoReflect.Descriptor instead.
func (*SaleTimeSeriesRecord) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{31}
}

func (x *SaleTimeSeriesRecord) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *SaleTimeSeriesRecord) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SaleTimeSeriesRecord) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SaleTimeSeriesRecord) GetShares() map[string]string {
	if x != nil {
		return x.Shares
	}
	return nil
}

type SaleTimeSeriesRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales []*SaleTimeSeriesRecord `protobuf:"bytes,1,rep,name=sales,proto3" json:"sales,omitempty"`
}

func (x *SaleTimeSeriesRecords) Reset() {
	*x = SaleTimeSeriesRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleTimeSeriesRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleTimeSeriesRecords) ProtoMessage() {}

func (x *SaleTimeSeriesRecords) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleTimeSeriesRecords.ProtoReflect.Descriptor instead.
func (*SaleTimeSeriesRecords) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{32}
}

func (x *SaleTimeSeriesRecords) GetSales() []*SaleTimeSeriesRecord {
	if x != nil {
		return x.Sales
	}
	return nil
}

type SaleTimeSeriesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses   []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Marketplace string                 `protobuf:"bytes,2,opt,name=marketplace,proto3" json:"marketplace,omitempty"`
	From        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3,oneof" json:"to,omitempty"`
	Offset      *int64                 `protobuf:"varint,5,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Size        *int64                 `protobuf:"varint,6,opt,name=size,proto3,oneof" json:"size,omitempty"`
	SortASC     *bool                  `protobuf:"varint,7,opt,name=sortASC,proto3,oneof" json:"sortASC,omitempty"`
}

func (x *SaleTimeSeriesFilter) Reset() {
	*x = SaleTimeSeriesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleTimeSeriesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleTimeSeriesFilter) ProtoMessage() {}

func (x *SaleTimeSeriesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleTimeSeriesFilter.ProtoReflect.Descriptor instead.
func (*SaleTimeSeriesFilter) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{33}
}

func (x *SaleTimeSeriesFilter) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *SaleTimeSeriesFilter) GetMarketplace() string {
	if x != nil {
		return x.Marketplace
	}
	return ""
}

func (x *SaleTimeSeriesFilter) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SaleTimeSeriesFilter) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SaleTimeSeriesFilter) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *SaleTimeSeriesFilter) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *SaleTimeSeriesFilter) GetSortASC() bool {
	if x != nil && x.SortASC != nil {
		return *x.SortASC
	}
	return false
}

type SaleTimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      string                 `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Shares        string                 `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares,omitempty"`
	NetValue      string                 `protobuf:"bytes,4,opt,name=netValue,proto3" json:"netValue,omitempty"`
	PaymentAmount string                 `protobuf:"bytes,5,opt,name=paymentAmount,proto3" json:"paymentAmount,omitempty"`
	PlatformFee   string                 `protobuf:"bytes,6,opt,name=platformFee,proto3" json:"platformFee,omitempty"`
	UsdQuote      string                 `protobuf:"bytes,7,opt,name=usdQuote,proto3" json:"usdQuote,omitempty"`
	Price         string                 `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SaleTimeSeries) Reset() {
	*x = SaleTimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleTimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleTimeSeries) ProtoMessage() {}

func (x *SaleTimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleTimeSeries.ProtoReflect.Descriptor instead.
func (*SaleTimeSeries) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{34}
}

func (x *SaleTimeSeries) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SaleTimeSeries) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *SaleTimeSeries) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *SaleTimeSeries) GetNetValue() string {
	if x != nil {
		return x.NetValue
	}
	return ""
}

func (x *SaleTimeSeries) GetPaymentAmount() string {
	if x != nil {
		return x.PaymentAmount
	}
	return ""
}

func (x *SaleTimeSeries) GetPlatformFee() string {
	if x != nil {
		return x.PlatformFee
	}
	return ""
}

func (x *SaleTimeSeries) GetUsdQuote() string {
	if x != nil {
		return x.UsdQuote
	}
	return ""
}

func (x *SaleTimeSeries) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type SaleTimeSeriesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales []*SaleTimeSeries `protobuf:"bytes,1,rep,name=sales,proto3" json:"sales,omitempty"`
}

func (x *SaleTimeSeriesListResponse) Reset() {
	*x = SaleTimeSeriesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleTimeSeriesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleTimeSeriesListResponse) ProtoMessage() {}

func (x *SaleTimeSeriesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleTimeSeriesListResponse.ProtoReflect.Descriptor instead.
func (*SaleTimeSeriesListResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{35}
}

func (x *SaleTimeSeriesListResponse) GetSales() []*SaleTimeSeries {
	if x != nil {
		return x.Sales
	}
	return nil
}

type SaleRevenuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revenues map[string]string `protobuf:"bytes,1,rep,name=revenues,proto3" json:"revenues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SaleRevenuesResponse) Reset() {
	*x = SaleRevenuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleRevenuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleRevenuesResponse) ProtoMessage() {}

func (x *SaleRevenuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleRevenuesResponse.ProtoReflect.Descriptor instead.
func (*SaleRevenuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{36}
}

func (x *SaleRevenuesResponse) GetRevenues() map[string]string {
	if x != nil {
		return x.Revenues
	}
	return nil
}

type HistoricalExchangeRateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // ts.UTC().Format(time.RFC3339Nano) for BSON.ISODate()
	CurrencyPair string                 `protobuf:"bytes,2,opt,name=currencyPair,proto3" json:"currencyPair,omitempty"`
}

func (x *HistoricalExchangeRateFilter) Reset() {
	*x = HistoricalExchangeRateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalExchangeRateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalExchangeRateFilter) ProtoMessage() {}

func (x *HistoricalExchangeRateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalExchangeRateFilter.ProtoReflect.Descriptor instead.
func (*HistoricalExchangeRateFilter) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{37}
}

func (x *HistoricalExchangeRateFilter) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HistoricalExchangeRateFilter) GetCurrencyPair() string {
	if x != nil {
		return x.CurrencyPair
	}
	return ""
}

type ExchangeRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // ts.UTC().Format(time.RFC3339Nano) for BSON.ISODate()
	Price        float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	CurrencyPair string                 `protobuf:"bytes,3,opt,name=currencyPair,proto3" json:"currencyPair,omitempty"`
}

func (x *ExchangeRateResponse) Reset() {
	*x = ExchangeRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateResponse) ProtoMessage() {}

func (x *ExchangeRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateResponse.ProtoReflect.Descriptor instead.
func (*ExchangeRateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{38}
}

func (x *ExchangeRateResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExchangeRateResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ExchangeRateResponse) GetCurrencyPair() string {
	if x != nil {
		return x.CurrencyPair
	}
	return ""
}

type GetDetailedTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID        string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	BurnedIncluded bool   `protobuf:"varint,2,opt,name=BurnedIncluded,proto3" json:"BurnedIncluded,omitempty"`
}

func (x *GetDetailedTokenRequest) Reset() {
	*x = GetDetailedTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailedTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedTokenRequest) ProtoMessage() {}

func (x *GetDetailedTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedTokenRequest.ProtoReflect.Descriptor instead.
func (*GetDetailedTokenRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{39}
}

func (x *GetDetailedTokenRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *GetDetailedTokenRequest) GetBurnedIncluded() bool {
	if x != nil {
		return x.BurnedIncluded
	}
	return false
}

type UpdateAssetConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID       string              `protobuf:"bytes,1,opt,name=indexID,proto3" json:"indexID,omitempty"`
	Configuration *AssetConfiguration `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *UpdateAssetConfigurationRequest) Reset() {
	*x = UpdateAssetConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetConfigurationRequest) ProtoMessage() {}

func (x *UpdateAssetConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateAssetConfigurationRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *UpdateAssetConfigurationRequest) GetConfiguration() *AssetConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

var File_indexer_proto protoreflect.FileDescriptor

var file_indexer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x26, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x70, 0x0a, 0x25, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x08,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x08, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x3c, 0x0a, 0x08, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x5a,
	0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73, 0x22, 0x23, 0x0a,
	0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x44, 0x22, 0x24, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x46, 0x53, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x50, 0x46, 0x53, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f,
	0x6f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4c, 0x6f, 0x6f,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x72, 0x61, 0x67, 0x67, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x2b, 0x0a, 0x15, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x22, 0xc4, 0x06, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52,
	0x4c, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x49, 0x4d, 0x45, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x49, 0x4d, 0x45, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x45, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x78,
	0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x52, 0x4c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x55, 0x52, 0x4c, 0x12, 0x30, 0x0a, 0x13, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x12,
	0x38, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x29, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x06, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x22, 0x6e,
	0x0a, 0x19, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xca,
	0x03, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x62, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xe3, 0x06, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0f, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x25, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x78, 0x55,
	0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x78, 0x55, 0x52, 0x4c, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xa9, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x45, 0x54, 0x48, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x29, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x23,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x14,
	0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x05,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x22, 0xc1, 0x02, 0x0a, 0x14, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x53,
	0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x41,
	0x53, 0x43, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x41, 0x53, 0x43, 0x22, 0x94, 0x02, 0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x1a,
	0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x53, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x1c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x22, 0x7e, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x41, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x84, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x44, 0x12, 0x10, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x4b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73, 0x12, 0x11, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73, 0x1a,
	0x12, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x45, 0x54, 0x48, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x54,
	0x48, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x4b, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_indexer_proto_rawDescOnce sync.Once
	file_indexer_proto_rawDescData = file_indexer_proto_rawDesc
)

func file_indexer_proto_rawDescGZIP() []byte {
	file_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_proto_rawDescData)
	})
	return file_indexer_proto_rawDescData
}

var file_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_indexer_proto_goTypes = []interface{}{
	(*CheckAddressOwnTokenByCriteriaResponse)(nil), // 0: indexer.CheckAddressOwnTokenByCriteriaResponse
	(*CheckAddressOwnTokenByCriteriaRequest)(nil),  // 1: indexer.CheckAddressOwnTokenByCriteriaRequest
	(*Criteria)(nil), // 2: indexer.Criteria
	(*GetOwnersByBlockchainContractsRequest)(nil), // 3: indexer.GetOwnersByBlockchainContractsRequest
	(*Addresses)(nil),                          // 4: indexer.Addresses
	(*IndexIDs)(nil),                           // 5: indexer.IndexIDs
	(*IndexID)(nil),                            // 6: indexer.IndexID
	(*TotalBalance)(nil),                       // 7: indexer.TotalBalance
	(*DetailedToken)(nil),                      // 8: indexer.DetailedToken
	(*DisplayConfiguration)(nil),               // 9: indexer.DisplayConfiguration
	(*MouseConfiguration)(nil),                 // 10: indexer.MouseConfiguration
	(*KeyboardConfiguration)(nil),              // 11: indexer.KeyboardConfiguration
	(*InteractionConfiguration)(nil),           // 12: indexer.InteractionConfiguration
	(*AssetConfiguration)(nil),                 // 13: indexer.AssetConfiguration
	(*AssetAttributes)(nil),                    // 14: indexer.AssetAttributes
	(*VersionedProjectMetadata)(nil),           // 15: indexer.VersionedProjectMetadata
	(*ProjectMetadata)(nil),                    // 16: indexer.ProjectMetadata
	(*Artist)(nil),                             // 17: indexer.Artist
	(*IndexAccountTokensRequest)(nil),          // 18: indexer.IndexAccountTokensRequest
	(*AccountToken)(nil),                       // 19: indexer.AccountToken
	(*UpdateOwnerForFungibleTokenRequest)(nil), // 20: indexer.UpdateOwnerForFungibleTokenRequest
	(*UpdateOwnerRequest)(nil),                 // 21: indexer.UpdateOwnerRequest
	(*EmptyMessage)(nil),                       // 22: indexer.EmptyMessage
	(*PushProvenanceRequest)(nil),              // 23: indexer.PushProvenanceRequest
	(*Token)(nil),                              // 24: indexer.Token
	(*Provenance)(nil),                         // 25: indexer.Provenance
	(*BaseTokenInfo)(nil),                      // 26: indexer.BaseTokenInfo
	(*GetETHBlockTimeRequest)(nil),             // 27: indexer.GetETHBlockTimeRequest
	(*BlockTime)(nil),                          // 28: indexer.BlockTime
	(*Address)(nil),                            // 29: indexer.Address
	(*AccountIdentity)(nil),                    // 30: indexer.AccountIdentity
	(*SaleTimeSeriesRecord)(nil),               // 31: indexer.SaleTimeSeriesRecord
	(*SaleTimeSeriesRecords)(nil),              // 32: indexer.SaleTimeSeriesRecords
	(*SaleTimeSeriesFilter)(nil),               // 33: indexer.SaleTimeSeriesFilter
	(*SaleTimeSeries)(nil),                     // 34: indexer.SaleTimeSeries
	(*SaleTimeSeriesListResponse)(nil),         // 35: indexer.SaleTimeSeriesListResponse
	(*SaleRevenuesResponse)(nil),               // 36: indexer.SaleRevenuesResponse
	(*HistoricalExchangeRateFilter)(nil),       // 37: indexer.HistoricalExchangeRateFilter
	(*ExchangeRateResponse)(nil),               // 38: indexer.ExchangeRateResponse
	(*GetDetailedTokenRequest)(nil),            // 39: indexer.GetDetailedTokenRequest
	(*UpdateAssetConfigurationRequest)(nil),    // 40: indexer.UpdateAssetConfigurationRequest
	nil,                                        // 41: indexer.GetOwnersByBlockchainContractsRequest.BlockchainContractsEntry
	nil,                                        // 42: indexer.Token.OwnersEntry
	nil,                                        // 43: indexer.SaleTimeSeriesRecord.ValuesEntry
	nil,                                        // 44: indexer.SaleTimeSeriesRecord.SharesEntry
	nil,                                        // 45: indexer.SaleRevenuesResponse.RevenuesEntry
	(*structpb.Struct)(nil),                    // 46: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),              // 47: google.protobuf.Timestamp
}
var file_indexer_proto_depIdxs = []int32{
	2,  // 0: indexer.CheckAddressOwnTokenByCriteriaRequest.Criteria:type_name -> indexer.Criteria
	41, // 1: indexer.GetOwnersByBlockchainContractsRequest.BlockchainContracts:type_name -> indexer.GetOwnersByBlockchainContractsRequest.BlockchainContractsEntry
	24, // 2: indexer.DetailedToken.Token:type_name -> indexer.Token
	14, // 3: indexer.DetailedToken.Attributes:type_name -> indexer.AssetAttributes
	15, // 4: indexer.DetailedToken.ProjectMetadata:type_name -> indexer.VersionedProjectMetadata
	10, // 5: indexer.InteractionConfiguration.Mouse:type_name -> indexer.MouseConfiguration
	11, // 6: indexer.InteractionConfiguration.Keyboard:type_name -> indexer.KeyboardConfiguration
	9,  // 7: indexer.AssetConfiguration.Display:type_name -> indexer.DisplayConfiguration
	12, // 8: indexer.AssetConfiguration.Interaction:type_name -> indexer.InteractionConfiguration
	13, // 9: indexer.AssetAttributes.Configuration:type_name -> indexer.AssetConfiguration
	16, // 10: indexer.VersionedProjectMetadata.Origin:type_name -> indexer.ProjectMetadata
	16, // 11: indexer.VersionedProjectMetadata.Latest:type_name -> indexer.ProjectMetadata
	14, // 12: indexer.ProjectMetadata.Attributes:type_name -> indexer.AssetAttributes
	17, // 13: indexer.ProjectMetadata.Artists:type_name -> indexer.Artist
	19, // 14: indexer.IndexAccountTokensRequest.AccountTokens:type_name -> indexer.AccountToken
	25, // 15: indexer.PushProvenanceRequest.Provenance:type_name -> indexer.Provenance
	42, // 16: indexer.Token.Owners:type_name -> indexer.Token.OwnersEntry
	26, // 17: indexer.Token.OriginTokenInfo:type_name -> indexer.BaseTokenInfo
	25, // 18: indexer.Token.Provenances:type_name -> indexer.Provenance
	46, // 19: indexer.SaleTimeSeriesRecord.metadata:type_name -> google.protobuf.Struct
	43, // 20: indexer.SaleTimeSeriesRecord.values:type_name -> indexer.SaleTimeSeriesRecord.ValuesEntry
	44, // 21: indexer.SaleTimeSeriesRecord.shares:type_name -> indexer.SaleTimeSeriesRecord.SharesEntry
	31, // 22: indexer.SaleTimeSeriesRecords.sales:type_name -> indexer.SaleTimeSeriesRecord
	47, // 23: indexer.SaleTimeSeriesFilter.from:type_name -> google.protobuf.Timestamp
	47, // 24: indexer.SaleTimeSeriesFilter.to:type_name -> google.protobuf.Timestamp
	47, // 25: indexer.SaleTimeSeries.timestamp:type_name -> google.protobuf.Timestamp
	34, // 26: indexer.SaleTimeSeriesListResponse.sales:type_name -> indexer.SaleTimeSeries
	45, // 27: indexer.SaleRevenuesResponse.revenues:type_name -> indexer.SaleRevenuesResponse.RevenuesEntry
	47, // 28: indexer.HistoricalExchangeRateFilter.timestamp:type_name -> google.protobuf.Timestamp
	47, // 29: indexer.ExchangeRateResponse.timestamp:type_name -> google.protobuf.Timestamp
	13, // 30: indexer.UpdateAssetConfigurationRequest.configuration:type_name -> indexer.AssetConfiguration
	4,  // 31: indexer.GetOwnersByBlockchainContractsRequest.BlockchainContractsEntry.value:type_name -> indexer.Addresses
	6,  // 32: indexer.Indexer.GetTokenByIndexID:input_type -> indexer.IndexID
	23, // 33: indexer.Indexer.PushProvenance:input_type -> indexer.PushProvenanceRequest
	21, // 34: indexer.Indexer.UpdateOwner:input_type -> indexer.UpdateOwnerRequest
	20, // 35: indexer.Indexer.UpdateOwnerForFungibleToken:input_type -> indexer.UpdateOwnerForFungibleTokenRequest
	18, // 36: indexer.Indexer.IndexAccountTokens:input_type -> indexer.IndexAccountTokensRequest
	39, // 37: indexer.Indexer.GetDetailedToken:input_type -> indexer.GetDetailedTokenRequest
	4,  // 38: indexer.Indexer.GetTotalBalanceOfOwnerAccounts:input_type -> indexer.Addresses
	5,  // 39: indexer.Indexer.GetOwnerAccountsByIndexIDs:input_type -> indexer.IndexIDs
	1,  // 40: indexer.Indexer.CheckAddressOwnTokenByCriteria:input_type -> indexer.CheckAddressOwnTokenByCriteriaRequest
	3,  // 41: indexer.Indexer.GetOwnersByBlockchainContracts:input_type -> indexer.GetOwnersByBlockchainContractsRequest
	27, // 42: indexer.Indexer.GetETHBlockTime:input_type -> indexer.GetETHBlockTimeRequest
	29, // 43: indexer.Indexer.GetIdentity:input_type -> indexer.Address
	32, // 44: indexer.Indexer.SendTimeSeriesData:input_type -> indexer.SaleTimeSeriesRecords
	33, // 45: indexer.Indexer.GetSaleTimeSeries:input_type -> indexer.SaleTimeSeriesFilter
	33, // 46: indexer.Indexer.GetSaleRevenues:input_type -> indexer.SaleTimeSeriesFilter
	37, // 47: indexer.Indexer.GetHistoricalExchangeRate:input_type -> indexer.HistoricalExchangeRateFilter
	40, // 48: indexer.Indexer.UpdateAssetConfiguration:input_type -> indexer.UpdateAssetConfigurationRequest
	24, // 49: indexer.Indexer.GetTokenByIndexID:output_type -> indexer.Token
	22, // 50: indexer.Indexer.PushProvenance:output_type -> indexer.EmptyMessage
	22, // 51: indexer.Indexer.UpdateOwner:output_type -> indexer.EmptyMessage
	22, // 52: indexer.Indexer.UpdateOwnerForFungibleToken:output_type -> indexer.EmptyMessage
	22, // 53: indexer.Indexer.IndexAccountTokens:output_type -> indexer.EmptyMessage
	8,  // 54: indexer.Indexer.GetDetailedToken:output_type -> indexer.DetailedToken
	7,  // 55: indexer.Indexer.GetTotalBalanceOfOwnerAccounts:output_type -> indexer.TotalBalance
	4,  // 56: indexer.Indexer.GetOwnerAccountsByIndexIDs:output_type -> indexer.Addresses
	0,  // 57: indexer.Indexer.CheckAddressOwnTokenByCriteria:output_type -> indexer.CheckAddressOwnTokenByCriteriaResponse
	4,  // 58: indexer.Indexer.GetOwnersByBlockchainContracts:output_type -> indexer.Addresses
	28, // 59: indexer.Indexer.GetETHBlockTime:output_type -> indexer.BlockTime
	30, // 60: indexer.Indexer.GetIdentity:output_type -> indexer.AccountIdentity
	22, // 61: indexer.Indexer.SendTimeSeriesData:output_type -> indexer.EmptyMessage
	35, // 62: indexer.Indexer.GetSaleTimeSeries:output_type -> indexer.SaleTimeSeriesListResponse
	36, // 63: indexer.Indexer.GetSaleRevenues:output_type -> indexer.SaleRevenuesResponse
	38, // 64: indexer.Indexer.GetHistoricalExchangeRate:output_type -> indexer.ExchangeRateResponse
	22, // 65: indexer.Indexer.UpdateAssetConfiguration:output_type -> indexer.EmptyMessage
	49, // [49:66] is the sub-list for method output_type
	32, // [32:49] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_indexer_proto_init() }
func file_indexer_proto_init() {
	if File_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAddressOwnTokenByCriteriaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAddressOwnTokenByCriteriaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Criteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOwnersByBlockchainContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyboardConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexAccountTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOwnerForFungibleTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushProvenanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetETHBlockTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleTimeSeriesRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleTimeSeriesRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleTimeSeriesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleTimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleTimeSeriesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleRevenuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalExchangeRateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailedTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indexer_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_indexer_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_proto_depIdxs,
		MessageInfos:      file_indexer_proto_msgTypes,
	}.Build()
	File_indexer_proto = out.File
	file_indexer_proto_rawDesc = nil
	file_indexer_proto_goTypes = nil
	file_indexer_proto_depIdxs = nil
}
