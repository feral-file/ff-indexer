// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: indexer.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountTokens []*AccountToken `protobuf:"bytes,1,rep,name=AccountTokens,proto3" json:"AccountTokens,omitempty"`
}

func (x *AccountTokens) Reset() {
	*x = AccountTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTokens) ProtoMessage() {}

func (x *AccountTokens) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTokens.ProtoReflect.Descriptor instead.
func (*AccountTokens) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *AccountTokens) GetAccountTokens() []*AccountToken {
	if x != nil {
		return x.AccountTokens
	}
	return nil
}

type GetDetailedAccountTokensByOwnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailedTokenV2 []*DetailedTokenV2 `protobuf:"bytes,1,rep,name=DetailedTokenV2,proto3" json:"DetailedTokenV2,omitempty"`
}

func (x *GetDetailedAccountTokensByOwnersResponse) Reset() {
	*x = GetDetailedAccountTokensByOwnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailedAccountTokensByOwnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedAccountTokensByOwnersResponse) ProtoMessage() {}

func (x *GetDetailedAccountTokensByOwnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedAccountTokensByOwnersResponse.ProtoReflect.Descriptor instead.
func (*GetDetailedAccountTokensByOwnersResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *GetDetailedAccountTokensByOwnersResponse) GetDetailedTokenV2() []*DetailedTokenV2 {
	if x != nil {
		return x.DetailedTokenV2
	}
	return nil
}

type DetailedTokenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      *Token   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	IPFSPinned bool     `protobuf:"varint,2,opt,name=IPFSPinned,proto3" json:"IPFSPinned,omitempty"`
	Asset      *AssetV2 `protobuf:"bytes,3,opt,name=Asset,proto3" json:"Asset,omitempty"`
}

func (x *DetailedTokenV2) Reset() {
	*x = DetailedTokenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedTokenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedTokenV2) ProtoMessage() {}

func (x *DetailedTokenV2) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedTokenV2.ProtoReflect.Descriptor instead.
func (*DetailedTokenV2) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *DetailedTokenV2) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DetailedTokenV2) GetIPFSPinned() bool {
	if x != nil {
		return x.IPFSPinned
	}
	return false
}

func (x *DetailedTokenV2) GetAsset() *AssetV2 {
	if x != nil {
		return x.Asset
	}
	return nil
}

type AssetV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID           string           `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	ThumbnailID       string           `protobuf:"bytes,2,opt,name=ThumbnailID,proto3" json:"ThumbnailID,omitempty"`
	LastRefreshedTime string           `protobuf:"bytes,3,opt,name=LastRefreshedTime,proto3" json:"LastRefreshedTime,omitempty"`
	Attributes        *AssetAttributes `protobuf:"bytes,4,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	Metadata          *AssetMetadata   `protobuf:"bytes,5,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *AssetV2) Reset() {
	*x = AssetV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetV2) ProtoMessage() {}

func (x *AssetV2) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetV2.ProtoReflect.Descriptor instead.
func (*AssetV2) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *AssetV2) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *AssetV2) GetThumbnailID() string {
	if x != nil {
		return x.ThumbnailID
	}
	return ""
}

func (x *AssetV2) GetLastRefreshedTime() string {
	if x != nil {
		return x.LastRefreshedTime
	}
	return ""
}

func (x *AssetV2) GetAttributes() *AssetAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AssetV2) GetMetadata() *AssetMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AssetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *VersionedProjectMetadata `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
}

func (x *AssetMetadata) Reset() {
	*x = AssetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetMetadata) ProtoMessage() {}

func (x *AssetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetMetadata.ProtoReflect.Descriptor instead.
func (*AssetMetadata) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *AssetMetadata) GetProject() *VersionedProjectMetadata {
	if x != nil {
		return x.Project
	}
	return nil
}

type GetAccountTokensByOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owners   []string `protobuf:"bytes,1,rep,name=Owners,proto3" json:"Owners,omitempty"`
	IndexIDs []string `protobuf:"bytes,2,rep,name=IndexIDs,proto3" json:"IndexIDs,omitempty"`
	Offset   int64    `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Size     int64    `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty"`
	SortBy   string   `protobuf:"bytes,5,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
}

func (x *GetAccountTokensByOwnersRequest) Reset() {
	*x = GetAccountTokensByOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountTokensByOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountTokensByOwnersRequest) ProtoMessage() {}

func (x *GetAccountTokensByOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountTokensByOwnersRequest.ProtoReflect.Descriptor instead.
func (*GetAccountTokensByOwnersRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccountTokensByOwnersRequest) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *GetAccountTokensByOwnersRequest) GetIndexIDs() []string {
	if x != nil {
		return x.IndexIDs
	}
	return nil
}

func (x *GetAccountTokensByOwnersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAccountTokensByOwnersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetAccountTokensByOwnersRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type Owners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owners []string `protobuf:"bytes,1,rep,name=Owners,proto3" json:"Owners,omitempty"`
}

func (x *Owners) Reset() {
	*x = Owners{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owners) ProtoMessage() {}

func (x *Owners) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owners.ProtoReflect.Descriptor instead.
func (*Owners) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *Owners) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

type GetDetailedAccountTokensByOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owners          []string         `protobuf:"bytes,1,rep,name=Owners,proto3" json:"Owners,omitempty"`
	FilterParameter *FilterParameter `protobuf:"bytes,2,opt,name=FilterParameter,proto3" json:"FilterParameter,omitempty"`
	LastUpdatedAt   string           `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	SortBy          string           `protobuf:"bytes,4,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
	Offset          int64            `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Size            int64            `protobuf:"varint,6,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *GetDetailedAccountTokensByOwnersRequest) Reset() {
	*x = GetDetailedAccountTokensByOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailedAccountTokensByOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedAccountTokensByOwnersRequest) ProtoMessage() {}

func (x *GetDetailedAccountTokensByOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedAccountTokensByOwnersRequest.ProtoReflect.Descriptor instead.
func (*GetDetailedAccountTokensByOwnersRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *GetDetailedAccountTokensByOwnersRequest) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *GetDetailedAccountTokensByOwnersRequest) GetFilterParameter() *FilterParameter {
	if x != nil {
		return x.FilterParameter
	}
	return nil
}

func (x *GetDetailedAccountTokensByOwnersRequest) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *GetDetailedAccountTokensByOwnersRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *GetDetailedAccountTokensByOwnersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDetailedAccountTokensByOwnersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FilterParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string   `protobuf:"bytes,1,opt,name=Source,proto3" json:"Source,omitempty"`
	IDs    []string `protobuf:"bytes,2,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *FilterParameter) Reset() {
	*x = FilterParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterParameter) ProtoMessage() {}

func (x *FilterParameter) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterParameter.ProtoReflect.Descriptor instead.
func (*FilterParameter) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{8}
}

func (x *FilterParameter) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FilterParameter) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

type Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=Addresses,proto3" json:"Addresses,omitempty"`
}

func (x *Addresses) Reset() {
	*x = Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addresses) ProtoMessage() {}

func (x *Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addresses.ProtoReflect.Descriptor instead.
func (*Addresses) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{9}
}

func (x *Addresses) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type IndexIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexIDs []string `protobuf:"bytes,1,rep,name=IndexIDs,proto3" json:"IndexIDs,omitempty"`
}

func (x *IndexIDs) Reset() {
	*x = IndexIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexIDs) ProtoMessage() {}

func (x *IndexIDs) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexIDs.ProtoReflect.Descriptor instead.
func (*IndexIDs) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{10}
}

func (x *IndexIDs) GetIndexIDs() []string {
	if x != nil {
		return x.IndexIDs
	}
	return nil
}

type TotalBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TotalBalance) Reset() {
	*x = TotalBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalBalance) ProtoMessage() {}

func (x *TotalBalance) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalBalance.ProtoReflect.Descriptor instead.
func (*TotalBalance) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{11}
}

func (x *TotalBalance) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DetailedToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           *Token                    `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ThumbnailID     string                    `protobuf:"bytes,2,opt,name=ThumbnailID,proto3" json:"ThumbnailID,omitempty"`
	IPFSPinned      bool                      `protobuf:"varint,3,opt,name=IPFSPinned,proto3" json:"IPFSPinned,omitempty"`
	Attributes      *AssetAttributes          `protobuf:"bytes,4,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	ProjectMetadata *VersionedProjectMetadata `protobuf:"bytes,5,opt,name=ProjectMetadata,proto3" json:"ProjectMetadata,omitempty"`
}

func (x *DetailedToken) Reset() {
	*x = DetailedToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedToken) ProtoMessage() {}

func (x *DetailedToken) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedToken.ProtoReflect.Descriptor instead.
func (*DetailedToken) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{12}
}

func (x *DetailedToken) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DetailedToken) GetThumbnailID() string {
	if x != nil {
		return x.ThumbnailID
	}
	return ""
}

func (x *DetailedToken) GetIPFSPinned() bool {
	if x != nil {
		return x.IPFSPinned
	}
	return false
}

func (x *DetailedToken) GetAttributes() *AssetAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DetailedToken) GetProjectMetadata() *VersionedProjectMetadata {
	if x != nil {
		return x.ProjectMetadata
	}
	return nil
}

type AssetAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scrollable bool `protobuf:"varint,1,opt,name=Scrollable,proto3" json:"Scrollable,omitempty"`
}

func (x *AssetAttributes) Reset() {
	*x = AssetAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAttributes) ProtoMessage() {}

func (x *AssetAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAttributes.ProtoReflect.Descriptor instead.
func (*AssetAttributes) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{13}
}

func (x *AssetAttributes) GetScrollable() bool {
	if x != nil {
		return x.Scrollable
	}
	return false
}

type VersionedProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *ProjectMetadata `protobuf:"bytes,1,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Latest *ProjectMetadata `protobuf:"bytes,2,opt,name=Latest,proto3" json:"Latest,omitempty"`
}

func (x *VersionedProjectMetadata) Reset() {
	*x = VersionedProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedProjectMetadata) ProtoMessage() {}

func (x *VersionedProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedProjectMetadata.ProtoReflect.Descriptor instead.
func (*VersionedProjectMetadata) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{14}
}

func (x *VersionedProjectMetadata) GetOrigin() *ProjectMetadata {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *VersionedProjectMetadata) GetLatest() *ProjectMetadata {
	if x != nil {
		return x.Latest
	}
	return nil
}

type ProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistID            string           `protobuf:"bytes,1,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	ArtistName          string           `protobuf:"bytes,2,opt,name=ArtistName,proto3" json:"ArtistName,omitempty"`
	ArtistURL           string           `protobuf:"bytes,3,opt,name=ArtistURL,proto3" json:"ArtistURL,omitempty"`
	AssetID             string           `protobuf:"bytes,4,opt,name=AssetID,proto3" json:"AssetID,omitempty"`
	Title               string           `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
	Description         string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	MIMEType            string           `protobuf:"bytes,7,opt,name=MIMEType,proto3" json:"MIMEType,omitempty"`
	Medium              string           `protobuf:"bytes,8,opt,name=Medium,proto3" json:"Medium,omitempty"`
	MaxEdition          int64            `protobuf:"varint,9,opt,name=MaxEdition,proto3" json:"MaxEdition,omitempty"`
	BaseCurrency        string           `protobuf:"bytes,10,opt,name=BaseCurrency,proto3" json:"BaseCurrency,omitempty"`
	BasePrice           float64          `protobuf:"fixed64,11,opt,name=BasePrice,proto3" json:"BasePrice,omitempty"`
	Source              string           `protobuf:"bytes,12,opt,name=Source,proto3" json:"Source,omitempty"`
	SourceURL           string           `protobuf:"bytes,13,opt,name=SourceURL,proto3" json:"SourceURL,omitempty"`
	PreviewURL          string           `protobuf:"bytes,14,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`
	ThumbnailURL        string           `protobuf:"bytes,15,opt,name=ThumbnailURL,proto3" json:"ThumbnailURL,omitempty"`
	GalleryThumbnailURL string           `protobuf:"bytes,16,opt,name=GalleryThumbnailURL,proto3" json:"GalleryThumbnailURL,omitempty"`
	AssetData           string           `protobuf:"bytes,17,opt,name=AssetData,proto3" json:"AssetData,omitempty"`
	AssetURL            string           `protobuf:"bytes,18,opt,name=AssetURL,proto3" json:"AssetURL,omitempty"`
	Attributes          *AssetAttributes `protobuf:"bytes,19,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	ArtworkMetadata     string           `protobuf:"bytes,20,opt,name=ArtworkMetadata,proto3" json:"ArtworkMetadata,omitempty"`
	LastUpdatedAt       string           `protobuf:"bytes,21,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	InitialSaleModel    string           `protobuf:"bytes,22,opt,name=InitialSaleModel,proto3" json:"InitialSaleModel,omitempty"`
	OriginalFileURL     string           `protobuf:"bytes,23,opt,name=OriginalFileURL,proto3" json:"OriginalFileURL,omitempty"`
	Artists             []*Artist        `protobuf:"bytes,24,rep,name=Artists,proto3" json:"Artists,omitempty"`
}

func (x *ProjectMetadata) Reset() {
	*x = ProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMetadata) ProtoMessage() {}

func (x *ProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMetadata.ProtoReflect.Descriptor instead.
func (*ProjectMetadata) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{15}
}

func (x *ProjectMetadata) GetArtistID() string {
	if x != nil {
		return x.ArtistID
	}
	return ""
}

func (x *ProjectMetadata) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *ProjectMetadata) GetArtistURL() string {
	if x != nil {
		return x.ArtistURL
	}
	return ""
}

func (x *ProjectMetadata) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *ProjectMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProjectMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProjectMetadata) GetMIMEType() string {
	if x != nil {
		return x.MIMEType
	}
	return ""
}

func (x *ProjectMetadata) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *ProjectMetadata) GetMaxEdition() int64 {
	if x != nil {
		return x.MaxEdition
	}
	return 0
}

func (x *ProjectMetadata) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *ProjectMetadata) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *ProjectMetadata) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProjectMetadata) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *ProjectMetadata) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

func (x *ProjectMetadata) GetThumbnailURL() string {
	if x != nil {
		return x.ThumbnailURL
	}
	return ""
}

func (x *ProjectMetadata) GetGalleryThumbnailURL() string {
	if x != nil {
		return x.GalleryThumbnailURL
	}
	return ""
}

func (x *ProjectMetadata) GetAssetData() string {
	if x != nil {
		return x.AssetData
	}
	return ""
}

func (x *ProjectMetadata) GetAssetURL() string {
	if x != nil {
		return x.AssetURL
	}
	return ""
}

func (x *ProjectMetadata) GetAttributes() *AssetAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProjectMetadata) GetArtworkMetadata() string {
	if x != nil {
		return x.ArtworkMetadata
	}
	return ""
}

func (x *ProjectMetadata) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *ProjectMetadata) GetInitialSaleModel() string {
	if x != nil {
		return x.InitialSaleModel
	}
	return ""
}

func (x *ProjectMetadata) GetOriginalFileURL() string {
	if x != nil {
		return x.OriginalFileURL
	}
	return ""
}

func (x *ProjectMetadata) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistID   string `protobuf:"bytes,1,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	ArtistName string `protobuf:"bytes,2,opt,name=ArtistName,proto3" json:"ArtistName,omitempty"`
	ArtistURL  string `protobuf:"bytes,3,opt,name=ArtistURL,proto3" json:"ArtistURL,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{16}
}

func (x *Artist) GetArtistID() string {
	if x != nil {
		return x.ArtistID
	}
	return ""
}

func (x *Artist) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *Artist) GetArtistURL() string {
	if x != nil {
		return x.ArtistURL
	}
	return ""
}

type IndexAccountTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner         string          `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	AccountTokens []*AccountToken `protobuf:"bytes,2,rep,name=AccountTokens,proto3" json:"AccountTokens,omitempty"`
}

func (x *IndexAccountTokensRequest) Reset() {
	*x = IndexAccountTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexAccountTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexAccountTokensRequest) ProtoMessage() {}

func (x *IndexAccountTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexAccountTokensRequest.ProtoReflect.Descriptor instead.
func (*IndexAccountTokensRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{17}
}

func (x *IndexAccountTokensRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IndexAccountTokensRequest) GetAccountTokens() []*AccountToken {
	if x != nil {
		return x.AccountTokens
	}
	return nil
}

type AccountToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // FIXME: need implement BaseTokenInfo
	Blockchain        string   `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible          bool     `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType      string   `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress   string   `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	IndexID           string   `protobuf:"bytes,6,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	OwnerAccount      string   `protobuf:"bytes,7,opt,name=OwnerAccount,proto3" json:"OwnerAccount,omitempty"`
	Balance           int64    `protobuf:"varint,8,opt,name=Balance,proto3" json:"Balance,omitempty"`
	LastActivityTime  string   `protobuf:"bytes,9,opt,name=LastActivityTime,proto3" json:"LastActivityTime,omitempty"`
	LastRefreshedTime string   `protobuf:"bytes,10,opt,name=LastRefreshedTime,proto3" json:"LastRefreshedTime,omitempty"`
	LastPendingTime   []string `protobuf:"bytes,11,rep,name=LastPendingTime,proto3" json:"LastPendingTime,omitempty"`
	LastUpdatedAt     string   `protobuf:"bytes,12,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	PendingTxs        []string `protobuf:"bytes,13,rep,name=PendingTxs,proto3" json:"PendingTxs,omitempty"`
}

func (x *AccountToken) Reset() {
	*x = AccountToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountToken) ProtoMessage() {}

func (x *AccountToken) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountToken.ProtoReflect.Descriptor instead.
func (*AccountToken) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{18}
}

func (x *AccountToken) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AccountToken) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *AccountToken) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *AccountToken) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *AccountToken) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *AccountToken) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *AccountToken) GetOwnerAccount() string {
	if x != nil {
		return x.OwnerAccount
	}
	return ""
}

func (x *AccountToken) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountToken) GetLastActivityTime() string {
	if x != nil {
		return x.LastActivityTime
	}
	return ""
}

func (x *AccountToken) GetLastRefreshedTime() string {
	if x != nil {
		return x.LastRefreshedTime
	}
	return ""
}

func (x *AccountToken) GetLastPendingTime() []string {
	if x != nil {
		return x.LastPendingTime
	}
	return nil
}

func (x *AccountToken) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *AccountToken) GetPendingTxs() []string {
	if x != nil {
		return x.PendingTxs
	}
	return nil
}

type UpdateOwnerForFungibleTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID    string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	LockedTime string `protobuf:"bytes,2,opt,name=LockedTime,proto3" json:"LockedTime,omitempty"`
	To         string `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Total      int64  `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *UpdateOwnerForFungibleTokenRequest) Reset() {
	*x = UpdateOwnerForFungibleTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOwnerForFungibleTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnerForFungibleTokenRequest) ProtoMessage() {}

func (x *UpdateOwnerForFungibleTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnerForFungibleTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnerForFungibleTokenRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateOwnerForFungibleTokenRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *UpdateOwnerForFungibleTokenRequest) GetLockedTime() string {
	if x != nil {
		return x.LockedTime
	}
	return ""
}

func (x *UpdateOwnerForFungibleTokenRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *UpdateOwnerForFungibleTokenRequest) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID   string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Owner     string `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	UpdatedAt string `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *UpdateOwnerRequest) Reset() {
	*x = UpdateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnerRequest) ProtoMessage() {}

func (x *UpdateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnerRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOwnerRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *UpdateOwnerRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *UpdateOwnerRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{21}
}

type PushProvenanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID    string      `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	LockedTime string      `protobuf:"bytes,2,opt,name=LockedTime,proto3" json:"LockedTime,omitempty"`
	Provenance *Provenance `protobuf:"bytes,3,opt,name=Provenance,proto3" json:"Provenance,omitempty"`
}

func (x *PushProvenanceRequest) Reset() {
	*x = PushProvenanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushProvenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushProvenanceRequest) ProtoMessage() {}

func (x *PushProvenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushProvenanceRequest.ProtoReflect.Descriptor instead.
func (*PushProvenanceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{22}
}

func (x *PushProvenanceRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *PushProvenanceRequest) GetLockedTime() string {
	if x != nil {
		return x.LockedTime
	}
	return ""
}

func (x *PushProvenanceRequest) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type IndexID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
}

func (x *IndexID) Reset() {
	*x = IndexID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexID) ProtoMessage() {}

func (x *IndexID) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexID.ProtoReflect.Descriptor instead.
func (*IndexID) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{23}
}

func (x *IndexID) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Blockchain        string           `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible          bool             `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType      string           `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress   string           `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	Edition           int64            `protobuf:"varint,6,opt,name=Edition,proto3" json:"Edition,omitempty"`
	EditionName       string           `protobuf:"bytes,7,opt,name=EditionName,proto3" json:"EditionName,omitempty"`
	MintedAt          string           `protobuf:"bytes,8,opt,name=MintedAt,proto3" json:"MintedAt,omitempty"` // time type is mapped by string
	Balance           int64            `protobuf:"varint,9,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Owner             string           `protobuf:"bytes,10,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Owners            map[string]int64 `protobuf:"bytes,11,rep,name=Owners,proto3" json:"Owners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OwnersArray       []string         `protobuf:"bytes,12,rep,name=OwnersArray,proto3" json:"OwnersArray,omitempty"`
	AssetID           string           `protobuf:"bytes,13,opt,name=AssetID,proto3" json:"AssetID,omitempty"`
	OriginTokenInfo   []*BaseTokenInfo `protobuf:"bytes,14,rep,name=OriginTokenInfo,proto3" json:"OriginTokenInfo,omitempty"`
	IsDemo            bool             `protobuf:"varint,15,opt,name=IsDemo,proto3" json:"IsDemo,omitempty"`
	IndexID           string           `protobuf:"bytes,16,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Source            string           `protobuf:"bytes,17,opt,name=Source,proto3" json:"Source,omitempty"`
	Swapped           bool             `protobuf:"varint,18,opt,name=Swapped,proto3" json:"Swapped,omitempty"`
	SwappedFrom       string           `protobuf:"bytes,19,opt,name=SwappedFrom,proto3" json:"SwappedFrom,omitempty"`
	SwappedTo         string           `protobuf:"bytes,20,opt,name=SwappedTo,proto3" json:"SwappedTo,omitempty"`
	Burned            bool             `protobuf:"varint,21,opt,name=Burned,proto3" json:"Burned,omitempty"`
	Provenances       []*Provenance    `protobuf:"bytes,22,rep,name=Provenances,proto3" json:"Provenances,omitempty"`
	LastActivityTime  string           `protobuf:"bytes,23,opt,name=LastActivityTime,proto3" json:"LastActivityTime,omitempty"`
	LastRefreshedTime string           `protobuf:"bytes,24,opt,name=LastRefreshedTime,proto3" json:"LastRefreshedTime,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{24}
}

func (x *Token) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Token) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Token) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *Token) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *Token) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Token) GetEdition() int64 {
	if x != nil {
		return x.Edition
	}
	return 0
}

func (x *Token) GetEditionName() string {
	if x != nil {
		return x.EditionName
	}
	return ""
}

func (x *Token) GetMintedAt() string {
	if x != nil {
		return x.MintedAt
	}
	return ""
}

func (x *Token) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Token) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Token) GetOwners() map[string]int64 {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Token) GetOwnersArray() []string {
	if x != nil {
		return x.OwnersArray
	}
	return nil
}

func (x *Token) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *Token) GetOriginTokenInfo() []*BaseTokenInfo {
	if x != nil {
		return x.OriginTokenInfo
	}
	return nil
}

func (x *Token) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *Token) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *Token) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Token) GetSwapped() bool {
	if x != nil {
		return x.Swapped
	}
	return false
}

func (x *Token) GetSwappedFrom() string {
	if x != nil {
		return x.SwappedFrom
	}
	return ""
}

func (x *Token) GetSwappedTo() string {
	if x != nil {
		return x.SwappedTo
	}
	return ""
}

func (x *Token) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Token) GetProvenances() []*Provenance {
	if x != nil {
		return x.Provenances
	}
	return nil
}

func (x *Token) GetLastActivityTime() string {
	if x != nil {
		return x.LastActivityTime
	}
	return ""
}

func (x *Token) GetLastRefreshedTime() string {
	if x != nil {
		return x.LastRefreshedTime
	}
	return ""
}

type Provenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormerOwner string `protobuf:"bytes,1,opt,name=FormerOwner,proto3" json:"FormerOwner,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Owner       string `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Blockchain  string `protobuf:"bytes,4,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	BlockNumber int64  `protobuf:"varint,5,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Timestamp   string `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TxID        string `protobuf:"bytes,7,opt,name=TxID,proto3" json:"TxID,omitempty"`
	TxURL       string `protobuf:"bytes,8,opt,name=TxURL,proto3" json:"TxURL,omitempty"`
}

func (x *Provenance) Reset() {
	*x = Provenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance) ProtoMessage() {}

func (x *Provenance) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance.ProtoReflect.Descriptor instead.
func (*Provenance) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{25}
}

func (x *Provenance) GetFormerOwner() string {
	if x != nil {
		return x.FormerOwner
	}
	return ""
}

func (x *Provenance) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Provenance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Provenance) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Provenance) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Provenance) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Provenance) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *Provenance) GetTxURL() string {
	if x != nil {
		return x.TxURL
	}
	return ""
}

type BaseTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Blockchain      string `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible        bool   `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType    string `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress string `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
}

func (x *BaseTokenInfo) Reset() {
	*x = BaseTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTokenInfo) ProtoMessage() {}

func (x *BaseTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTokenInfo.ProtoReflect.Descriptor instead.
func (*BaseTokenInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{26}
}

func (x *BaseTokenInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BaseTokenInfo) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *BaseTokenInfo) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *BaseTokenInfo) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *BaseTokenInfo) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

var File_indexer_proto protoreflect.FileDescriptor

var file_indexer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x44, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x33, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x56, 0x32, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x0f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x22, 0x6f, 0x0a,
	0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32,
	0x12, 0x1c, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x50, 0x46, 0x53, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x50, 0x46, 0x53, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x32, 0x52, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0xd1,
	0x01, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x22, 0x20, 0x0a, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x3b, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x29, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73,
	0x22, 0x24, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x46, 0x53,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x50,
	0x46, 0x53, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x31, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x6e, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x22, 0xb4, 0x06, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x49, 0x4d, 0x45, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x49, 0x4d, 0x45, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x45, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x45,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55,
	0x52, 0x4c, 0x12, 0x30, 0x0a, 0x13, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x30,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x21, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x06, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x22, 0x66, 0x0a,
	0x19, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x78, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7e, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x22, 0xcb, 0x06, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d,
	0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x44,
	0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x44, 0x65, 0x6d,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39,
	0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x78, 0x55, 0x52,
	0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x78, 0x55, 0x52, 0x4c, 0x22, 0xa9,
	0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0xfb, 0x04, 0x0a, 0x07, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x08, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x44, 0x1a, 0x06, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a,
	0x0e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x13,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1a, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x08, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x1a,
	0x0e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x0a, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x0d, 0x2e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x73, 0x12, 0x09, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x44, 0x73, 0x1a, 0x0a, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x77, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_indexer_proto_rawDescOnce sync.Once
	file_indexer_proto_rawDescData = file_indexer_proto_rawDesc
)

func file_indexer_proto_rawDescGZIP() []byte {
	file_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_proto_rawDescData)
	})
	return file_indexer_proto_rawDescData
}

var file_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_indexer_proto_goTypes = []interface{}{
	(*AccountTokens)(nil),                            // 0: AccountTokens
	(*GetDetailedAccountTokensByOwnersResponse)(nil), // 1: GetDetailedAccountTokensByOwnersResponse
	(*DetailedTokenV2)(nil),                          // 2: DetailedTokenV2
	(*AssetV2)(nil),                                  // 3: AssetV2
	(*AssetMetadata)(nil),                            // 4: AssetMetadata
	(*GetAccountTokensByOwnersRequest)(nil),          // 5: GetAccountTokensByOwnersRequest
	(*Owners)(nil),                                   // 6: Owners
	(*GetDetailedAccountTokensByOwnersRequest)(nil),  // 7: GetDetailedAccountTokensByOwnersRequest
	(*FilterParameter)(nil),                          // 8: FilterParameter
	(*Addresses)(nil),                                // 9: Addresses
	(*IndexIDs)(nil),                                 // 10: IndexIDs
	(*TotalBalance)(nil),                             // 11: TotalBalance
	(*DetailedToken)(nil),                            // 12: DetailedToken
	(*AssetAttributes)(nil),                          // 13: AssetAttributes
	(*VersionedProjectMetadata)(nil),                 // 14: VersionedProjectMetadata
	(*ProjectMetadata)(nil),                          // 15: ProjectMetadata
	(*Artist)(nil),                                   // 16: Artist
	(*IndexAccountTokensRequest)(nil),                // 17: IndexAccountTokensRequest
	(*AccountToken)(nil),                             // 18: AccountToken
	(*UpdateOwnerForFungibleTokenRequest)(nil),       // 19: UpdateOwnerForFungibleTokenRequest
	(*UpdateOwnerRequest)(nil),                       // 20: UpdateOwnerRequest
	(*Empty)(nil),                                    // 21: Empty
	(*PushProvenanceRequest)(nil),                    // 22: PushProvenanceRequest
	(*IndexID)(nil),                                  // 23: IndexID
	(*Token)(nil),                                    // 24: Token
	(*Provenance)(nil),                               // 25: Provenance
	(*BaseTokenInfo)(nil),                            // 26: BaseTokenInfo
	nil,                                              // 27: Token.OwnersEntry
}
var file_indexer_proto_depIdxs = []int32{
	18, // 0: AccountTokens.AccountTokens:type_name -> AccountToken
	2,  // 1: GetDetailedAccountTokensByOwnersResponse.DetailedTokenV2:type_name -> DetailedTokenV2
	24, // 2: DetailedTokenV2.Token:type_name -> Token
	3,  // 3: DetailedTokenV2.Asset:type_name -> AssetV2
	13, // 4: AssetV2.Attributes:type_name -> AssetAttributes
	4,  // 5: AssetV2.Metadata:type_name -> AssetMetadata
	14, // 6: AssetMetadata.Project:type_name -> VersionedProjectMetadata
	8,  // 7: GetDetailedAccountTokensByOwnersRequest.FilterParameter:type_name -> FilterParameter
	24, // 8: DetailedToken.Token:type_name -> Token
	13, // 9: DetailedToken.Attributes:type_name -> AssetAttributes
	14, // 10: DetailedToken.ProjectMetadata:type_name -> VersionedProjectMetadata
	15, // 11: VersionedProjectMetadata.Origin:type_name -> ProjectMetadata
	15, // 12: VersionedProjectMetadata.Latest:type_name -> ProjectMetadata
	13, // 13: ProjectMetadata.Attributes:type_name -> AssetAttributes
	16, // 14: ProjectMetadata.Artists:type_name -> Artist
	18, // 15: IndexAccountTokensRequest.AccountTokens:type_name -> AccountToken
	25, // 16: PushProvenanceRequest.Provenance:type_name -> Provenance
	27, // 17: Token.Owners:type_name -> Token.OwnersEntry
	26, // 18: Token.OriginTokenInfo:type_name -> BaseTokenInfo
	25, // 19: Token.Provenances:type_name -> Provenance
	23, // 20: Indexer.GetTokenByIndexID:input_type -> IndexID
	22, // 21: Indexer.PushProvenance:input_type -> PushProvenanceRequest
	20, // 22: Indexer.UpdateOwner:input_type -> UpdateOwnerRequest
	19, // 23: Indexer.UpdateOwnerForFungibleToken:input_type -> UpdateOwnerForFungibleTokenRequest
	17, // 24: Indexer.IndexAccountTokens:input_type -> IndexAccountTokensRequest
	23, // 25: Indexer.GetDetailedToken:input_type -> IndexID
	9,  // 26: Indexer.GetTotalBalanceOfOwnerAccounts:input_type -> Addresses
	10, // 27: Indexer.GetOwnerAccountsByIndexIDs:input_type -> IndexIDs
	7,  // 28: Indexer.GetDetailedAccountTokensByOwners:input_type -> GetDetailedAccountTokensByOwnersRequest
	5,  // 29: Indexer.GetAccountTokensByOwners:input_type -> GetAccountTokensByOwnersRequest
	24, // 30: Indexer.GetTokenByIndexID:output_type -> Token
	21, // 31: Indexer.PushProvenance:output_type -> Empty
	21, // 32: Indexer.UpdateOwner:output_type -> Empty
	21, // 33: Indexer.UpdateOwnerForFungibleToken:output_type -> Empty
	21, // 34: Indexer.IndexAccountTokens:output_type -> Empty
	12, // 35: Indexer.GetDetailedToken:output_type -> DetailedToken
	11, // 36: Indexer.GetTotalBalanceOfOwnerAccounts:output_type -> TotalBalance
	9,  // 37: Indexer.GetOwnerAccountsByIndexIDs:output_type -> Addresses
	1,  // 38: Indexer.GetDetailedAccountTokensByOwners:output_type -> GetDetailedAccountTokensByOwnersResponse
	0,  // 39: Indexer.GetAccountTokensByOwners:output_type -> AccountTokens
	30, // [30:40] is the sub-list for method output_type
	20, // [20:30] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_indexer_proto_init() }
func file_indexer_proto_init() {
	if File_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailedAccountTokensByOwnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedTokenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountTokensByOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owners); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailedAccountTokensByOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexAccountTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOwnerForFungibleTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushProvenanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_proto_depIdxs,
		MessageInfos:      file_indexer_proto_msgTypes,
	}.Build()
	File_indexer_proto = out.File
	file_indexer_proto_rawDesc = nil
	file_indexer_proto_goTypes = nil
	file_indexer_proto_depIdxs = nil
}
