// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: indexer.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID   string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Owner     string `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	UpdatedAt string `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *UpdateOwnerRequest) Reset() {
	*x = UpdateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnerRequest) ProtoMessage() {}

func (x *UpdateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnerRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateOwnerRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *UpdateOwnerRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *UpdateOwnerRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{1}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist   bool   `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PushProvenanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID    string      `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	LockedTime string      `protobuf:"bytes,2,opt,name=LockedTime,proto3" json:"LockedTime,omitempty"`
	Provenance *Provenance `protobuf:"bytes,3,opt,name=Provenance,proto3" json:"Provenance,omitempty"`
}

func (x *PushProvenanceRequest) Reset() {
	*x = PushProvenanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushProvenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushProvenanceRequest) ProtoMessage() {}

func (x *PushProvenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushProvenanceRequest.ProtoReflect.Descriptor instead.
func (*PushProvenanceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *PushProvenanceRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *PushProvenanceRequest) GetLockedTime() string {
	if x != nil {
		return x.LockedTime
	}
	return ""
}

func (x *PushProvenanceRequest) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type IndexID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
}

func (x *IndexID) Reset() {
	*x = IndexID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexID) ProtoMessage() {}

func (x *IndexID) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexID.ProtoReflect.Descriptor instead.
func (*IndexID) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *IndexID) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Blockchain        string           `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible          bool             `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType      string           `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress   string           `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	Edition           int64            `protobuf:"varint,6,opt,name=Edition,proto3" json:"Edition,omitempty"`
	EditionName       string           `protobuf:"bytes,7,opt,name=EditionName,proto3" json:"EditionName,omitempty"`
	MintAt            string           `protobuf:"bytes,8,opt,name=MintAt,proto3" json:"MintAt,omitempty"` // time type is mapped by string
	Balance           int64            `protobuf:"varint,9,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Owner             string           `protobuf:"bytes,10,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Owners            map[string]int64 `protobuf:"bytes,11,rep,name=Owners,proto3" json:"Owners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OwnersArray       []string         `protobuf:"bytes,12,rep,name=OwnersArray,proto3" json:"OwnersArray,omitempty"`
	AssetID           string           `protobuf:"bytes,13,opt,name=AssetID,proto3" json:"AssetID,omitempty"`
	OriginTokenInfo   []*BaseTokenInfo `protobuf:"bytes,14,rep,name=OriginTokenInfo,proto3" json:"OriginTokenInfo,omitempty"`
	IsDemo            bool             `protobuf:"varint,15,opt,name=IsDemo,proto3" json:"IsDemo,omitempty"`
	IndexID           string           `protobuf:"bytes,16,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Source            string           `protobuf:"bytes,17,opt,name=Source,proto3" json:"Source,omitempty"`
	Swapped           bool             `protobuf:"varint,18,opt,name=Swapped,proto3" json:"Swapped,omitempty"`
	SwappedFrom       string           `protobuf:"bytes,19,opt,name=SwappedFrom,proto3" json:"SwappedFrom,omitempty"`
	SwappedTo         string           `protobuf:"bytes,20,opt,name=SwappedTo,proto3" json:"SwappedTo,omitempty"`
	Burned            bool             `protobuf:"varint,21,opt,name=Burned,proto3" json:"Burned,omitempty"`
	Provenances       []*Provenance    `protobuf:"bytes,22,rep,name=Provenances,proto3" json:"Provenances,omitempty"`
	LastActivityTime  string           `protobuf:"bytes,23,opt,name=LastActivityTime,proto3" json:"LastActivityTime,omitempty"`
	LastRefreshedTime string           `protobuf:"bytes,24,opt,name=LastRefreshedTime,proto3" json:"LastRefreshedTime,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *Token) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Token) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Token) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *Token) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *Token) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Token) GetEdition() int64 {
	if x != nil {
		return x.Edition
	}
	return 0
}

func (x *Token) GetEditionName() string {
	if x != nil {
		return x.EditionName
	}
	return ""
}

func (x *Token) GetMintAt() string {
	if x != nil {
		return x.MintAt
	}
	return ""
}

func (x *Token) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Token) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Token) GetOwners() map[string]int64 {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Token) GetOwnersArray() []string {
	if x != nil {
		return x.OwnersArray
	}
	return nil
}

func (x *Token) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *Token) GetOriginTokenInfo() []*BaseTokenInfo {
	if x != nil {
		return x.OriginTokenInfo
	}
	return nil
}

func (x *Token) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *Token) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *Token) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Token) GetSwapped() bool {
	if x != nil {
		return x.Swapped
	}
	return false
}

func (x *Token) GetSwappedFrom() string {
	if x != nil {
		return x.SwappedFrom
	}
	return ""
}

func (x *Token) GetSwappedTo() string {
	if x != nil {
		return x.SwappedTo
	}
	return ""
}

func (x *Token) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Token) GetProvenances() []*Provenance {
	if x != nil {
		return x.Provenances
	}
	return nil
}

func (x *Token) GetLastActivityTime() string {
	if x != nil {
		return x.LastActivityTime
	}
	return ""
}

func (x *Token) GetLastRefreshedTime() string {
	if x != nil {
		return x.LastRefreshedTime
	}
	return ""
}

type Provenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormerOwner string `protobuf:"bytes,1,opt,name=FormerOwner,proto3" json:"FormerOwner,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Owner       string `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Blockchain  string `protobuf:"bytes,4,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	BlockNumber int64  `protobuf:"varint,5,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Timestamp   string `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TxID        string `protobuf:"bytes,7,opt,name=TxID,proto3" json:"TxID,omitempty"`
	TxURL       string `protobuf:"bytes,8,opt,name=TxURL,proto3" json:"TxURL,omitempty"`
}

func (x *Provenance) Reset() {
	*x = Provenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance) ProtoMessage() {}

func (x *Provenance) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance.ProtoReflect.Descriptor instead.
func (*Provenance) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *Provenance) GetFormerOwner() string {
	if x != nil {
		return x.FormerOwner
	}
	return ""
}

func (x *Provenance) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Provenance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Provenance) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Provenance) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Provenance) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Provenance) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *Provenance) GetTxURL() string {
	if x != nil {
		return x.TxURL
	}
	return ""
}

type BaseTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Blockchain      string `protobuf:"bytes,2,opt,name=Blockchain,proto3" json:"Blockchain,omitempty"`
	Fungible        bool   `protobuf:"varint,3,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	ContractType    string `protobuf:"bytes,4,opt,name=ContractType,proto3" json:"ContractType,omitempty"`
	ContractAddress string `protobuf:"bytes,5,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
}

func (x *BaseTokenInfo) Reset() {
	*x = BaseTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTokenInfo) ProtoMessage() {}

func (x *BaseTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTokenInfo.ProtoReflect.Descriptor instead.
func (*BaseTokenInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *BaseTokenInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BaseTokenInfo) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *BaseTokenInfo) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *BaseTokenInfo) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *BaseTokenInfo) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

var File_indexer_proto protoreflect.FileDescriptor

var file_indexer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x62, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x22, 0xc7, 0x06, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69,
	0x6e, 0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x74,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0f, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x77, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x77,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x78, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x78, 0x55, 0x52, 0x4c, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x8f, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x08, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x44, 0x1a, 0x06, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x0e, 0x50, 0x75, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_indexer_proto_rawDescOnce sync.Once
	file_indexer_proto_rawDescData = file_indexer_proto_rawDesc
)

func file_indexer_proto_rawDescGZIP() []byte {
	file_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_proto_rawDescData)
	})
	return file_indexer_proto_rawDescData
}

var file_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_indexer_proto_goTypes = []interface{}{
	(*UpdateOwnerRequest)(nil),    // 0: UpdateOwnerRequest
	(*Empty)(nil),                 // 1: Empty
	(*Error)(nil),                 // 2: Error
	(*PushProvenanceRequest)(nil), // 3: PushProvenanceRequest
	(*IndexID)(nil),               // 4: IndexID
	(*Token)(nil),                 // 5: Token
	(*Provenance)(nil),            // 6: Provenance
	(*BaseTokenInfo)(nil),         // 7: BaseTokenInfo
	nil,                           // 8: Token.OwnersEntry
}
var file_indexer_proto_depIdxs = []int32{
	6, // 0: PushProvenanceRequest.Provenance:type_name -> Provenance
	8, // 1: Token.Owners:type_name -> Token.OwnersEntry
	7, // 2: Token.OriginTokenInfo:type_name -> BaseTokenInfo
	6, // 3: Token.Provenances:type_name -> Provenance
	4, // 4: Indexer.GetTokensByIndexID:input_type -> IndexID
	3, // 5: Indexer.PushProvenance:input_type -> PushProvenanceRequest
	0, // 6: Indexer.UpdateOwner:input_type -> UpdateOwnerRequest
	5, // 7: Indexer.GetTokensByIndexID:output_type -> Token
	2, // 8: Indexer.PushProvenance:output_type -> Error
	1, // 9: Indexer.UpdateOwner:output_type -> Empty
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_indexer_proto_init() }
func file_indexer_proto_init() {
	if File_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushProvenanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_proto_depIdxs,
		MessageInfos:      file_indexer_proto_msgTypes,
	}.Build()
	File_indexer_proto = out.File
	file_indexer_proto_rawDesc = nil
	file_indexer_proto_goTypes = nil
	file_indexer_proto_depIdxs = nil
}
